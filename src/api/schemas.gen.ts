// This file is auto-generated by @hey-api/openapi-ts

export const AdCreateSchema = {
    properties: {
        title: {
            type: 'string',
            maxLength: 100,
            title: 'Title'
        },
        author: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100
                },
                {
                    type: 'null'
                }
            ],
            title: 'Author'
        },
        price: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Price'
        },
        course: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100
                },
                {
                    type: 'null'
                }
            ],
            title: 'Course'
        },
        user_id: {
            type: 'integer',
            title: 'User Id'
        },
        selling: {
            type: 'boolean',
            title: 'Selling'
        },
        condition: {
            type: 'integer',
            title: 'Condition'
        }
    },
    type: 'object',
    required: ['title', 'author', 'price', 'course', 'user_id', 'selling', 'condition'],
    title: 'AdCreate'
} as const;

export const AdReadSchema = {
    properties: {
        ad_id: {
            type: 'integer',
            title: 'Ad Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        author: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Author'
        },
        price: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Price'
        },
        course: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Course'
        },
        user_id: {
            type: 'integer',
            title: 'User Id'
        },
        selling: {
            type: 'boolean',
            title: 'Selling'
        },
        condition: {
            type: 'integer',
            title: 'Condition'
        }
    },
    type: 'object',
    required: ['ad_id', 'title', 'author', 'price', 'course', 'user_id', 'selling', 'condition'],
    title: 'AdRead'
} as const;

export const AdUpdateSchema = {
    properties: {
        title: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        author: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100
                },
                {
                    type: 'null'
                }
            ],
            title: 'Author'
        },
        price: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Price'
        },
        course: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100
                },
                {
                    type: 'null'
                }
            ],
            title: 'Course'
        },
        selling: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Selling'
        },
        condition: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Condition'
        }
    },
    type: 'object',
    title: 'AdUpdate'
} as const;

export const AlbumCreateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'AlbumCreate'
} as const;

export const AlbumReadSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        imgs: {
            items: {
                '$ref': '#/components/schemas/ImgInAlbum'
            },
            type: 'array',
            title: 'Imgs'
        }
    },
    type: 'object',
    required: ['id', 'name', 'imgs'],
    title: 'AlbumRead'
} as const;

export const BearerResponseSchema = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        token_type: {
            type: 'string',
            title: 'Token Type'
        }
    },
    type: 'object',
    required: ['access_token', 'token_type'],
    title: 'BearerResponse'
} as const;

export const Body_auth_reset_forgot_passwordSchema = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'Body_auth-reset:forgot_password'
} as const;

export const Body_auth_reset_reset_passwordSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        password: {
            type: 'string',
            title: 'Password'
        }
    },
    type: 'object',
    required: ['token', 'password'],
    title: 'Body_auth-reset:reset_password'
} as const;

export const Body_auth_verify_request_tokenSchema = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'Body_auth-verify:request-token'
} as const;

export const Body_auth_verify_verifySchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        }
    },
    type: 'object',
    required: ['token'],
    title: 'Body_auth-verify:verify'
} as const;

export const Body_img_upload_imageSchema = {
    properties: {
        file: {
            type: 'string',
            format: 'binary',
            title: 'File'
        }
    },
    type: 'object',
    required: ['file'],
    title: 'Body_img-upload_image'
} as const;

export const CafeShiftCreateSchema = {
    properties: {
        starts_at: {
            type: 'string',
            format: 'date-time',
            title: 'Starts At'
        },
        ends_at: {
            type: 'string',
            format: 'date-time',
            title: 'Ends At'
        }
    },
    type: 'object',
    required: ['starts_at', 'ends_at'],
    title: 'CafeShiftCreate'
} as const;

export const CafeShiftReadSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        user_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User Id'
        },
        starts_at: {
            type: 'string',
            format: 'date-time',
            title: 'Starts At'
        },
        ends_at: {
            type: 'string',
            format: 'date-time',
            title: 'Ends At'
        }
    },
    type: 'object',
    required: ['id', 'user_id', 'starts_at', 'ends_at'],
    title: 'CafeShiftRead'
} as const;

export const CafeShiftUpdateSchema = {
    properties: {
        starts_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Starts At'
        },
        ends_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Ends At'
        },
        user_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User Id'
        }
    },
    type: 'object',
    title: 'CafeShiftUpdate'
} as const;

export const CarCreateSchema = {
    properties: {
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 1000
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        start_time: {
            type: 'string',
            format: 'date-time',
            title: 'Start Time'
        },
        end_time: {
            type: 'string',
            format: 'date-time',
            title: 'End Time'
        }
    },
    type: 'object',
    required: ['start_time', 'end_time'],
    title: 'CarCreate'
} as const;

export const CarReadSchema = {
    properties: {
        booking_id: {
            type: 'integer',
            title: 'Booking Id'
        },
        user_id: {
            type: 'integer',
            title: 'User Id'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        start_time: {
            type: 'string',
            format: 'date-time',
            title: 'Start Time'
        },
        end_time: {
            type: 'string',
            format: 'date-time',
            title: 'End Time'
        }
    },
    type: 'object',
    required: ['booking_id', 'user_id', 'description', 'start_time', 'end_time'],
    title: 'CarRead'
} as const;

export const CarUpdateSchema = {
    properties: {
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 1000
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        start_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start Time'
        },
        end_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End Time'
        }
    },
    type: 'object',
    title: 'CarUpdate'
} as const;

export const ErrorModelSchema = {
    properties: {
        detail: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                }
            ],
            title: 'Detail'
        }
    },
    type: 'object',
    required: ['detail'],
    title: 'ErrorModel'
} as const;

export const EventCreateSchema = {
    properties: {
        council_id: {
            type: 'integer',
            title: 'Council Id'
        },
        starts_at: {
            type: 'string',
            format: 'date-time',
            title: 'Starts At'
        },
        ends_at: {
            type: 'string',
            format: 'date-time',
            title: 'Ends At'
        },
        signup_start: {
            type: 'string',
            format: 'date-time',
            title: 'Signup Start'
        },
        signup_end: {
            type: 'string',
            format: 'date-time',
            title: 'Signup End'
        },
        title_sv: {
            type: 'string',
            maxLength: 100,
            title: 'Title Sv'
        },
        title_en: {
            type: 'string',
            maxLength: 100,
            title: 'Title En'
        },
        description_sv: {
            type: 'string',
            maxLength: 3000,
            title: 'Description Sv'
        },
        description_en: {
            type: 'string',
            maxLength: 3000,
            title: 'Description En'
        },
        max_event_users: {
            type: 'integer',
            title: 'Max Event Users'
        },
        priorities: {
            items: {
                type: 'string',
                enum: ['photographer', 'ordförande', 'dinmamma']
            },
            type: 'array',
            title: 'Priorities'
        },
        all_day: {
            type: 'boolean',
            title: 'All Day'
        },
        signup_not_opened_yet: {
            type: 'boolean',
            title: 'Signup Not Opened Yet'
        },
        recurring: {
            type: 'boolean',
            title: 'Recurring'
        },
        drink: {
            type: 'boolean',
            title: 'Drink'
        },
        food: {
            type: 'boolean',
            title: 'Food'
        },
        cash: {
            type: 'boolean',
            title: 'Cash'
        },
        closed: {
            type: 'boolean',
            title: 'Closed'
        },
        can_signup: {
            type: 'boolean',
            title: 'Can Signup'
        },
        drink_package: {
            type: 'boolean',
            title: 'Drink Package'
        }
    },
    type: 'object',
    required: ['council_id', 'starts_at', 'ends_at', 'signup_start', 'signup_end', 'title_sv', 'title_en', 'description_sv', 'description_en', 'max_event_users', 'priorities', 'all_day', 'signup_not_opened_yet', 'recurring', 'drink', 'food', 'cash', 'closed', 'can_signup', 'drink_package'],
    title: 'EventCreate'
} as const;

export const EventReadSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        starts_at: {
            type: 'string',
            format: 'date-time',
            title: 'Starts At'
        },
        ends_at: {
            type: 'string',
            format: 'date-time',
            title: 'Ends At'
        },
        signup_start: {
            type: 'string',
            format: 'date-time',
            title: 'Signup Start'
        },
        signup_end: {
            type: 'string',
            format: 'date-time',
            title: 'Signup End'
        },
        title_sv: {
            type: 'string',
            title: 'Title Sv'
        },
        title_en: {
            type: 'string',
            title: 'Title En'
        },
        description_sv: {
            type: 'string',
            title: 'Description Sv'
        },
        description_en: {
            type: 'string',
            title: 'Description En'
        },
        max_event_users: {
            type: 'integer',
            title: 'Max Event Users'
        },
        priorities: {
            items: {
                '$ref': '#/components/schemas/Priority_DB'
            },
            type: 'array',
            title: 'Priorities'
        },
        all_day: {
            type: 'boolean',
            title: 'All Day'
        },
        signup_not_opened_yet: {
            type: 'boolean',
            title: 'Signup Not Opened Yet'
        },
        recurring: {
            type: 'boolean',
            title: 'Recurring'
        },
        drink: {
            type: 'boolean',
            title: 'Drink'
        },
        food: {
            type: 'boolean',
            title: 'Food'
        },
        cash: {
            type: 'boolean',
            title: 'Cash'
        },
        closed: {
            type: 'boolean',
            title: 'Closed'
        },
        can_signup: {
            type: 'boolean',
            title: 'Can Signup'
        },
        drink_package: {
            type: 'boolean',
            title: 'Drink Package'
        }
    },
    type: 'object',
    required: ['id', 'starts_at', 'ends_at', 'signup_start', 'signup_end', 'title_sv', 'title_en', 'description_sv', 'description_en', 'max_event_users', 'priorities', 'all_day', 'signup_not_opened_yet', 'recurring', 'drink', 'food', 'cash', 'closed', 'can_signup', 'drink_package'],
    title: 'EventRead'
} as const;

export const EventSignupCreateSchema = {
    properties: {
        user_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User Id'
        },
        priority: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Priority'
        },
        group_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Group Name'
        }
    },
    type: 'object',
    title: 'EventSignupCreate'
} as const;

export const EventSignupDeleteSchema = {
    properties: {
        user_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User Id'
        }
    },
    type: 'object',
    title: 'EventSignupDelete'
} as const;

export const EventSignupUpdateSchema = {
    properties: {
        user_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User Id'
        },
        priority: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Priority'
        },
        group_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Group Name'
        }
    },
    type: 'object',
    title: 'EventSignupUpdate'
} as const;

export const EventUpdateSchema = {
    properties: {
        title_sv: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title Sv'
        },
        title_en: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title En'
        },
        description_sv: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 3000
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description Sv'
        },
        description_en: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 3000
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description En'
        },
        max_event_users: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Max Event Users'
        },
        all_day: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'All Day'
        },
        signup_not_opened_yet: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Signup Not Opened Yet'
        },
        recurring: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Recurring'
        },
        drink: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Drink'
        },
        food: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Food'
        },
        cash: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cash'
        },
        closed: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Closed'
        },
        can_signup: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Can Signup'
        },
        drink_package: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Drink Package'
        }
    },
    type: 'object',
    title: 'EventUpdate'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const ImgInAlbumSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['id'],
    title: 'ImgInAlbum'
} as const;

export const MeUpdateSchema = {
    properties: {
        first_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'First Name'
        },
        last_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Name'
        },
        start_year: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start Year'
        },
        program: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Program'
        },
        notifications: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Notifications'
        }
    },
    type: 'object',
    title: 'MeUpdate'
} as const;

export const NewsCreateSchema = {
    properties: {
        title_sv: {
            type: 'string',
            maxLength: 100,
            title: 'Title Sv'
        },
        title_en: {
            type: 'string',
            maxLength: 100,
            title: 'Title En'
        },
        content_sv: {
            type: 'string',
            maxLength: 3000,
            title: 'Content Sv'
        },
        content_en: {
            type: 'string',
            maxLength: 3000,
            title: 'Content En'
        },
        pinned_from: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pinned From'
        },
        pinned_to: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pinned To'
        }
    },
    type: 'object',
    required: ['title_sv', 'title_en', 'content_sv', 'content_en'],
    title: 'NewsCreate'
} as const;

export const NewsReadSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        title_sv: {
            type: 'string',
            title: 'Title Sv'
        },
        title_en: {
            type: 'string',
            title: 'Title En'
        },
        content_sv: {
            type: 'string',
            title: 'Content Sv'
        },
        content_en: {
            type: 'string',
            title: 'Content En'
        },
        author_id: {
            type: 'integer',
            title: 'Author Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        bumped_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Bumped At'
        },
        pinned_from: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pinned From'
        },
        pinned_to: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pinned To'
        }
    },
    type: 'object',
    required: ['id', 'title_sv', 'title_en', 'content_sv', 'content_en', 'author_id', 'created_at', 'bumped_at', 'pinned_from', 'pinned_to'],
    title: 'NewsRead'
} as const;

export const NewsUpdateSchema = {
    properties: {
        title_sv: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title Sv'
        },
        title_en: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title En'
        },
        content_sv: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 3000
                },
                {
                    type: 'null'
                }
            ],
            title: 'Content Sv'
        },
        content_en: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 3000
                },
                {
                    type: 'null'
                }
            ],
            title: 'Content En'
        },
        pinned_from: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pinned From'
        },
        pinned_to: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pinned To'
        }
    },
    type: 'object',
    title: 'NewsUpdate'
} as const;

export const PermissionCreateSchema = {
    properties: {
        action: {
            type: 'string',
            enum: ['view', 'manage'],
            title: 'Action'
        },
        target: {
            type: 'string',
            enum: ['Event', 'User', 'Post', 'Permission', 'News', 'Song', 'Ads', 'Gallery', 'Car', 'Cafe'],
            title: 'Target'
        }
    },
    type: 'object',
    required: ['action', 'target'],
    title: 'PermissionCreate'
} as const;

export const PermissionReadSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        action: {
            type: 'string',
            enum: ['view', 'manage'],
            title: 'Action'
        },
        target: {
            type: 'string',
            enum: ['Event', 'User', 'Post', 'Permission', 'News', 'Song', 'Ads', 'Gallery', 'Car', 'Cafe'],
            title: 'Target'
        }
    },
    type: 'object',
    required: ['id', 'action', 'target'],
    title: 'PermissionRead'
} as const;

export const PostCreateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        council_id: {
            type: 'integer',
            title: 'Council Id'
        }
    },
    type: 'object',
    required: ['name', 'council_id'],
    title: 'PostCreate'
} as const;

export const PostReadSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        council_id: {
            type: 'integer',
            title: 'Council Id'
        },
        permissions: {
            items: {
                '$ref': '#/components/schemas/_PostPermissionRead'
            },
            type: 'array',
            title: 'Permissions'
        }
    },
    type: 'object',
    required: ['id', 'name', 'council_id', 'permissions'],
    title: 'PostRead'
} as const;

export const Priority_DBSchema = {
    properties: {
        priority: {
            type: 'string',
            title: 'Priority'
        },
        event_id: {
            type: 'integer',
            title: 'Event Id'
        }
    },
    type: 'object',
    required: ['priority', 'event_id'],
    title: 'Priority_DB'
} as const;

export const SongCategoryCreateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'SongCategoryCreate'
} as const;

export const SongCategoryReadSchema = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['id', 'name'],
    title: 'SongCategoryRead'
} as const;

export const SongCreateSchema = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        },
        author: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Author'
        },
        melody: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Melody'
        },
        content: {
            type: 'string',
            title: 'Content'
        },
        category: {
            '$ref': '#/components/schemas/SongCategoryRead'
        }
    },
    type: 'object',
    required: ['title', 'author', 'melody', 'content', 'category'],
    title: 'SongCreate'
} as const;

export const SongReadSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        author: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Author'
        },
        melody: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Melody'
        },
        content: {
            type: 'string',
            title: 'Content'
        },
        category: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SongCategoryRead'
                },
                {
                    type: 'null'
                }
            ]
        },
        views: {
            type: 'integer',
            title: 'Views'
        }
    },
    type: 'object',
    required: ['id', 'title', 'author', 'melody', 'content', 'category', 'views'],
    title: 'SongRead'
} as const;

export const UpdatePermissionSchema = {
    properties: {
        post_id: {
            type: 'integer',
            title: 'Post Id'
        },
        change: {
            type: 'string',
            enum: ['add', 'remove'],
            title: 'Change'
        },
        permission_id: {
            type: 'integer',
            title: 'Permission Id'
        }
    },
    type: 'object',
    required: ['post_id', 'change', 'permission_id'],
    title: 'UpdatePermission'
} as const;

export const UpdateUserMemberSchema = {
    properties: {
        is_member: {
            type: 'boolean',
            title: 'Is Member'
        }
    },
    type: 'object',
    required: ['is_member'],
    title: 'UpdateUserMember'
} as const;

export const UserCreateSchema = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        is_active: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Superuser',
            default: false
        },
        is_verified: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Verified',
            default: false
        },
        first_name: {
            type: 'string',
            maxLength: 100,
            title: 'First Name'
        },
        last_name: {
            type: 'string',
            maxLength: 100,
            title: 'Last Name'
        },
        telephone_number: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 64,
                    minLength: 7,
                    format: 'phone'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Telephone Number'
        },
        start_year: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start Year'
        },
        program: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Program'
        }
    },
    type: 'object',
    required: ['email', 'password', 'first_name', 'last_name'],
    title: 'UserCreate'
} as const;

export const UserReadSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        is_verified: {
            type: 'boolean',
            title: 'Is Verified',
            default: false
        },
        first_name: {
            type: 'string',
            title: 'First Name'
        },
        last_name: {
            type: 'string',
            title: 'Last Name'
        },
        posts: {
            items: {
                '$ref': '#/components/schemas/_UserPostRead'
            },
            type: 'array',
            title: 'Posts'
        },
        events: {
            items: {
                '$ref': '#/components/schemas/_UserEventRead'
            },
            type: 'array',
            title: 'Events'
        },
        telephone_number: {
            type: 'string',
            maxLength: 64,
            minLength: 7,
            format: 'phone',
            title: 'Telephone Number'
        },
        start_year: {
            type: 'integer',
            title: 'Start Year'
        },
        account_created: {
            type: 'string',
            format: 'date-time',
            title: 'Account Created'
        },
        want_notifications: {
            type: 'boolean',
            title: 'Want Notifications'
        }
    },
    type: 'object',
    required: ['id', 'email', 'first_name', 'last_name', 'posts', 'events', 'telephone_number', 'start_year', 'account_created', 'want_notifications'],
    title: 'UserRead'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const _PostPermissionReadSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        action: {
            type: 'string',
            title: 'Action'
        },
        target: {
            type: 'string',
            title: 'Target'
        }
    },
    type: 'object',
    required: ['id', 'action', 'target'],
    title: '_PostPermissionRead'
} as const;

export const _UserEventReadSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['id'],
    title: '_UserEventRead'
} as const;

export const _UserPostReadSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        council_id: {
            type: 'integer',
            title: 'Council Id'
        }
    },
    type: 'object',
    required: ['id', 'name', 'council_id'],
    title: '_UserPostRead'
} as const;

export const loginSchema = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'password'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_auth-auth:jwt.login'
} as const;