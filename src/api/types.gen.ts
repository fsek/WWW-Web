// This file is auto-generated by @hey-api/openapi-ts

export type AdCreate = {
    title: string;
    author: (string | null);
    price: (number | null);
    course: (string | null);
    user_id: number;
    selling: boolean;
    condition: number;
};

export type AdRead = {
    ad_id: number;
    title: string;
    author: (string | null);
    price: (number | null);
    course: (string | null);
    user_id: number;
    selling: boolean;
    condition: number;
};

export type AdUpdate = {
    title?: (string | null);
    author?: (string | null);
    price?: (number | null);
    course?: (string | null);
    selling?: (boolean | null);
    condition?: (number | null);
};

export type AdventureMissionCreate = {
    title: string;
    description: string;
    max_points: number;
    min_points: number;
    nollning_id: number;
    nollning_week: number;
};

export type AdventureMissionRead = {
    id: number;
    title: string;
    description: string;
    max_points: number;
    min_points: number;
    nollning_id: number;
    nollning_week: number;
    created_at: Date;
};

export type AlbumCreate = {
    name: string;
};

export type AlbumRead = {
    id: number;
    name: string;
    imgs: Array<ImgInAlbum>;
};

export type BearerResponse = {
    access_token: string;
    token_type: string;
};

export type Body_auth_reset_forgot_password = {
    email: string;
};

export type Body_auth_reset_reset_password = {
    token: string;
    password: string;
};

export type Body_auth_verify_request_token = {
    email: string;
};

export type Body_auth_verify_verify = {
    token: string;
};

export type Body_img_upload_image = {
    file: (Blob | File);
};

export type CafeShiftCreate = {
    starts_at: Date;
    ends_at: Date;
};

export type CafeShiftRead = {
    id: number;
    user_id: (number | null);
    starts_at: Date;
    ends_at: Date;
};

export type CafeShiftUpdate = {
    starts_at?: (Date | null);
    ends_at?: (Date | null);
    user_id?: (number | null);
};

export type CandidateElectionCreate = {
    post_ids: Array<(number)>;
};

export type CandidateElectionRead = {
    candidate_id: number;
    user_id: number;
    user: CandidateUserRead;
    election_posts: Array<api_schemas__candidate_schema__PostRead>;
};

export type CandidateRead = {
    candidate_id: number;
    election_id: number;
    user_id: number;
    user: CandidateUserRead;
    election_posts: Array<api_schemas__candidate_schema__PostRead>;
};

export type CandidateUserRead = {
    first_name: string;
    last_name: string;
    email: string;
    telephone_number: string;
    start_year: number;
    account_created: Date;
    want_notifications: boolean;
};

export type CarCreate = {
    description?: (string | null);
    start_time: Date;
    end_time: Date;
};

export type CarRead = {
    booking_id: number;
    user_id: number;
    description: string;
    start_time: Date;
    end_time: Date;
};

export type CarUpdate = {
    description?: (string | null);
    start_time?: (Date | null);
    end_time?: (Date | null);
};

export type ElectionAddPosts = {
    posts: Array<ElectionPostCreate>;
};

export type ElectionCreate = {
    title: string;
    start_time: Date;
    end_time: Date;
    description: string;
};

export type ElectionPostCreate = {
    post_id: number;
    description?: (string | null);
};

export type ElectionPostRead = {
    id: number;
    name: string;
    council_id: number;
};

export type ElectionRead = {
    election_id: number;
    title: string;
    start_time: Date;
    end_time: Date;
    description: (string | null);
    posts: Array<ElectionPostRead>;
    candidates: Array<CandidateElectionRead>;
};

export type ErrorModel = {
    detail: (string | {
    [key: string]: (string);
});
};

export type EventCreate = {
    council_id: number;
    starts_at: Date;
    ends_at: Date;
    signup_start: Date;
    signup_end: Date;
    title_sv: string;
    title_en: string;
    description_sv: string;
    description_en: string;
    max_event_users: number;
    priorities: Array<('photographer' | 'ordfÃ¶rande' | 'dinmamma')>;
    all_day: boolean;
    signup_not_opened_yet: boolean;
    recurring: boolean;
    drink: boolean;
    food: boolean;
    cash: boolean;
    closed: boolean;
    can_signup: boolean;
    drink_package: boolean;
};

export type EventRead = {
    id: number;
    council_id: number;
    starts_at: Date;
    ends_at: Date;
    signup_start: Date;
    signup_end: Date;
    title_sv: string;
    title_en: string;
    description_sv: string;
    description_en: string;
    max_event_users: number;
    priorities: Array<Priority_DB>;
    all_day: boolean;
    signup_not_opened_yet: boolean;
    recurring: boolean;
    drink: boolean;
    food: boolean;
    cash: boolean;
    closed: boolean;
    can_signup: boolean;
    drink_package: boolean;
};

export type EventSignupCreate = {
    user_id?: (number | null);
    priority?: (string | null);
    group_name?: (string | null);
};

export type EventSignupDelete = {
    user_id?: (number | null);
};

export type EventSignupUpdate = {
    user_id?: (number | null);
    priority?: (string | null);
    group_name?: (string | null);
};

export type EventUpdate = {
    title_sv?: (string | null);
    title_en?: (string | null);
    description_sv?: (string | null);
    description_en?: (string | null);
    max_event_users?: (number | null);
    all_day?: (boolean | null);
    signup_not_opened_yet?: (boolean | null);
    recurring?: (boolean | null);
    drink?: (boolean | null);
    food?: (boolean | null);
    cash?: (boolean | null);
    closed?: (boolean | null);
    can_signup?: (boolean | null);
    drink_package?: (boolean | null);
};

export type GroupAddUser = {
    user_id: number;
    group_user_type: 'Mentor' | 'Mentee' | 'Default';
};

export enum group_user_type {
    MENTOR = 'Mentor',
    MENTEE = 'Mentee',
    DEFAULT = 'Default'
}

export type GroupCreate = {
    name: string;
    group_type: 'Mentor' | 'Mission' | 'Default' | 'Committee';
};

export enum group_type {
    MENTOR = 'Mentor',
    MISSION = 'Mission',
    DEFAULT = 'Default',
    COMMITTEE = 'Committee'
}

export type GroupMissionCreate = {
    points: number;
    adventure_mission_id: number;
};

export type GroupMissionRead = {
    points: number;
    adventure_mission: AdventureMissionRead;
    nollning_group: NollningGroupRead;
};

export type GroupRead = {
    id: number;
    name: string;
    group_type: 'Mentor' | 'Mission' | 'Default' | 'Committee';
    group_users: Array<GroupUserRead>;
};

export type GroupRemoveUser = {
    user_id: number;
};

export type GroupUserRead = {
    user: UserInGroupRead;
    group_user_type: 'Mentor' | 'Mentee' | 'Default';
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ImgInAlbum = {
    id: number;
};

export type MeUpdate = {
    first_name?: (string | null);
    last_name?: (string | null);
    start_year?: (number | null);
    program?: (string | null);
    notifications?: (boolean | null);
    stil_id?: (string | null);
};

export type NewsCreate = {
    title_sv: string;
    title_en: string;
    content_sv: string;
    content_en: string;
    pinned_from?: (Date | null);
    pinned_to?: (Date | null);
};

export type NewsRead = {
    id: number;
    title_sv: string;
    title_en: string;
    content_sv: string;
    content_en: string;
    author_id: number;
    created_at: Date;
    bumped_at: (Date | null);
    pinned_from: (Date | null);
    pinned_to: (Date | null);
};

export type NewsUpdate = {
    title_sv?: (string | null);
    title_en?: (string | null);
    content_sv?: (string | null);
    content_en?: (string | null);
    pinned_from?: (Date | null);
    pinned_to?: (Date | null);
};

export type NollningAddGroup = {
    group_id: number;
};

export type NollningCreate = {
    name: string;
    description: string;
};

export type NollningGroupRead = {
    id: number;
    group: GroupRead;
    nollning_id: number;
};

export type NollningRead = {
    name: string;
    description: string;
    id: number;
    missions: Array<AdventureMissionRead>;
    nollning_groups: Array<NollningGroupRead>;
};

export type PermissionCreate = {
    action: 'view' | 'manage';
    target: 'Event' | 'User' | 'Post' | 'Permission' | 'News' | 'Song' | 'Ads' | 'Gallery' | 'Car' | 'Cafe' | 'Election' | 'Groups' | 'Adventure Missions' | 'Nollning';
};

export enum action {
    VIEW = 'view',
    MANAGE = 'manage'
}

export enum target {
    EVENT = 'Event',
    USER = 'User',
    POST = 'Post',
    PERMISSION = 'Permission',
    NEWS = 'News',
    SONG = 'Song',
    ADS = 'Ads',
    GALLERY = 'Gallery',
    CAR = 'Car',
    CAFE = 'Cafe',
    ELECTION = 'Election',
    GROUPS = 'Groups',
    ADVENTURE_MISSIONS = 'Adventure Missions',
    NOLLNING = 'Nollning'
}

export type PermissionRead = {
    id: number;
    action: 'view' | 'manage';
    target: 'Event' | 'User' | 'Post' | 'Permission' | 'News' | 'Song' | 'Ads' | 'Gallery' | 'Car' | 'Cafe' | 'Election' | 'Groups' | 'Adventure Missions' | 'Nollning';
};

export type PostCreate = {
    name: string;
    council_id: number;
};

export type Priority_DB = {
    priority: string;
    event_id: number;
};

export type SongCategoryCreate = {
    name: string;
};

export type SongCategoryRead = {
    id: (number | null);
    name: string;
};

export type SongCreate = {
    title: string;
    author: (string | null);
    melody: (string | null);
    content: string;
    category: SongCategoryRead;
};

export type SongRead = {
    id: number;
    title: string;
    author: (string | null);
    melody: (string | null);
    content: string;
    category: (SongCategoryRead | null);
    views: number;
};

export type UpdatePermission = {
    post_id: number;
    change: 'add' | 'remove';
    permission_id: number;
};

export enum change {
    ADD = 'add',
    REMOVE = 'remove'
}

export type UpdateUserMember = {
    is_member: boolean;
};

export type UserCreate = {
    email: string;
    password: string;
    is_active?: (boolean | null);
    is_superuser?: (boolean | null);
    is_verified?: (boolean | null);
    first_name: string;
    last_name: string;
    telephone_number?: (string | null);
    start_year?: (number | null);
    program?: (string | null);
};

export type UserInGroupRead = {
    id: number;
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    is_verified?: boolean;
    first_name: string;
    last_name: string;
    program: (string | null);
};

export type UserRead = {
    id: number;
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    is_verified?: boolean;
    first_name: string;
    last_name: string;
    posts: Array<_UserPostRead>;
    events: Array<_UserEventRead>;
    telephone_number: string;
    start_year: number;
    account_created: Date;
    want_notifications: boolean;
    stil_id?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type _PostPermissionRead = {
    id: number;
    action: string;
    target: string;
};

export type _UserEventRead = {
    id: number;
};

export type _UserPostRead = {
    id: number;
    name: string;
    council_id: number;
};

export type api_schemas__candidate_schema__PostRead = {
    post_id: number;
    election_post_id: number;
};

export type api_schemas__post_schemas__PostRead = {
    id: number;
    name: string;
    council_id: number;
    permissions: Array<_PostPermissionRead>;
};

export type login = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type UsersGetAllUsersResponse = (Array<UserRead>);

export type UsersGetAllUsersError = unknown;

export type UsersGetMeResponse = (UserRead);

export type UsersGetMeError = unknown;

export type UsersUpdateMeData = {
    body: MeUpdate;
};

export type UsersUpdateMeResponse = (UserRead);

export type UsersUpdateMeError = (HTTPValidationError);

export type UsersUpdateUserData = {
    body: UpdateUserMember;
    path: {
        user_id: number;
    };
};

export type UsersUpdateUserResponse = (unknown);

export type UsersUpdateUserError = (HTTPValidationError);

export type PostsGetAllPostsResponse = (Array<api_schemas__post_schemas__PostRead>);

export type PostsGetAllPostsError = unknown;

export type PostsCreatePostData = {
    body: PostCreate;
};

export type PostsCreatePostResponse = (api_schemas__post_schemas__PostRead);

export type PostsCreatePostError = (HTTPValidationError);

export type PostsDeletePostData = {
    path: {
        post_id: number;
    };
};

export type PostsDeletePostResponse = (void);

export type PostsDeletePostError = (HTTPValidationError);

export type PermissionsGetAllPermissionsResponse = (Array<PermissionRead>);

export type PermissionsGetAllPermissionsError = unknown;

export type PermissionsCreatePermissionData = {
    body: PermissionCreate;
};

export type PermissionsCreatePermissionResponse = (PermissionRead);

export type PermissionsCreatePermissionError = (HTTPValidationError);

export type PermissionsChangePostPermissionData = {
    body: UpdatePermission;
};

export type PermissionsChangePostPermissionResponse = (unknown);

export type PermissionsChangePostPermissionError = (HTTPValidationError);

export type AuthAuthJwtLoginData = {
    body: login;
};

export type AuthAuthJwtLoginResponse = (BearerResponse);

export type AuthAuthJwtLoginError = (ErrorModel | HTTPValidationError);

export type AuthAuthJwtLogoutResponse = (unknown);

export type AuthAuthJwtLogoutError = (unknown);

export type AuthRegisterRegisterData = {
    body: UserCreate;
};

export type AuthRegisterRegisterResponse = (UserRead);

export type AuthRegisterRegisterError = (ErrorModel | HTTPValidationError);

export type AuthResetForgotPasswordData = {
    body: Body_auth_reset_forgot_password;
};

export type AuthResetForgotPasswordResponse = (unknown);

export type AuthResetForgotPasswordError = (HTTPValidationError);

export type AuthResetResetPasswordData = {
    body: Body_auth_reset_reset_password;
};

export type AuthResetResetPasswordResponse = (unknown);

export type AuthResetResetPasswordError = (ErrorModel | HTTPValidationError);

export type AuthVerifyRequestTokenData = {
    body: Body_auth_verify_request_token;
};

export type AuthVerifyRequestTokenResponse = (unknown);

export type AuthVerifyRequestTokenError = (HTTPValidationError);

export type AuthVerifyVerifyData = {
    body: Body_auth_verify_verify;
};

export type AuthVerifyVerifyResponse = (UserRead);

export type AuthVerifyVerifyError = (ErrorModel | HTTPValidationError);

export type EventsGetAllEventsResponse = (Array<EventRead>);

export type EventsGetAllEventsError = unknown;

export type EventsCreateEventData = {
    body: EventCreate;
};

export type EventsCreateEventResponse = (EventRead);

export type EventsCreateEventError = (HTTPValidationError);

export type EventsRemoveData = {
    path: {
        event_id: number;
    };
};

export type EventsRemoveResponse = (void);

export type EventsRemoveError = (HTTPValidationError);

export type EventsUpdateData = {
    body: EventUpdate;
    path: {
        event_id: number;
    };
};

export type EventsUpdateResponse = (EventRead);

export type EventsUpdateError = (HTTPValidationError);

export type EventsGetRandomSignupData = {
    path: {
        event_id: number;
    };
};

export type EventsGetRandomSignupResponse = (Array<UserRead>);

export type EventsGetRandomSignupError = (HTTPValidationError);

export type EventsGetAllSignupsData = {
    path: {
        event_id: number;
    };
};

export type EventsGetAllSignupsResponse = (Array<UserRead>);

export type EventsGetAllSignupsError = (HTTPValidationError);

export type EventSignupSignupRouteData = {
    body: EventSignupCreate;
    path: {
        event_id: number;
    };
};

export type EventSignupSignupRouteResponse = (EventRead);

export type EventSignupSignupRouteError = (HTTPValidationError);

export type EventSignupSignoffRouteData = {
    body: EventSignupDelete;
    path: {
        event_id: number;
    };
};

export type EventSignupSignoffRouteResponse = (EventRead);

export type EventSignupSignoffRouteError = (HTTPValidationError);

export type EventSignupUpdateSignupData = {
    body: EventSignupUpdate;
    path: {
        event_id: number;
    };
};

export type EventSignupUpdateSignupResponse = (EventRead);

export type EventSignupUpdateSignupError = (HTTPValidationError);

export type NewsGetAllNewsResponse = (Array<NewsRead>);

export type NewsGetAllNewsError = unknown;

export type NewsGetAmountOfNewsData = {
    path: {
        amount: number;
    };
};

export type NewsGetAmountOfNewsResponse = (Array<NewsRead>);

export type NewsGetAmountOfNewsError = (HTTPValidationError);

export type NewsGetNewsData = {
    path: {
        news_id: number;
    };
};

export type NewsGetNewsResponse = (NewsRead);

export type NewsGetNewsError = (HTTPValidationError);

export type NewsDeleteNewsData = {
    path: {
        news_id: number;
    };
};

export type NewsDeleteNewsResponse = (void);

export type NewsDeleteNewsError = (HTTPValidationError);

export type NewsUpdateNewsData = {
    body: NewsUpdate;
    path: {
        news_id: number;
    };
};

export type NewsUpdateNewsResponse = (NewsRead);

export type NewsUpdateNewsError = (HTTPValidationError);

export type NewsCreateNewsData = {
    body: NewsCreate;
};

export type NewsCreateNewsResponse = (NewsRead);

export type NewsCreateNewsError = (HTTPValidationError);

export type NewsBumpNewsData = {
    path: {
        news_id: number;
    };
};

export type NewsBumpNewsResponse = (NewsRead);

export type NewsBumpNewsError = (HTTPValidationError);

export type CafeViewAllShiftsResponse = (Array<CafeShiftRead>);

export type CafeViewAllShiftsError = unknown;

export type CafeViewShiftData = {
    path: {
        shift_id: number;
    };
};

export type CafeViewShiftResponse = (CafeShiftRead);

export type CafeViewShiftError = (HTTPValidationError);

export type CafeDeleteShiftData = {
    path: {
        shift_id: number;
    };
};

export type CafeDeleteShiftResponse = (void);

export type CafeDeleteShiftError = (HTTPValidationError);

export type CafeViewShiftsBetweenDatesData = {
    query: {
        end_date: Date;
        start_date: Date;
    };
};

export type CafeViewShiftsBetweenDatesResponse = (Array<CafeShiftRead>);

export type CafeViewShiftsBetweenDatesError = (HTTPValidationError);

export type CafeCreateShiftData = {
    body: CafeShiftCreate;
};

export type CafeCreateShiftResponse = (CafeShiftCreate);

export type CafeCreateShiftError = (HTTPValidationError);

export type CafeUpdateShiftData = {
    body: CafeShiftUpdate;
    path: {
        shift_id: number;
    };
};

export type CafeUpdateShiftResponse = (CafeShiftRead);

export type CafeUpdateShiftError = (HTTPValidationError);

export type CafeSignupToShiftData = {
    path: {
        shift_id: number;
    };
};

export type CafeSignupToShiftResponse = (CafeShiftRead);

export type CafeSignupToShiftError = (HTTPValidationError);

export type CafeSignoffFromShiftData = {
    path: {
        shift_id: number;
    };
};

export type CafeSignoffFromShiftResponse = (CafeShiftRead);

export type CafeSignoffFromShiftError = (HTTPValidationError);

export type SongsGetAllSongsResponse = (Array<SongRead>);

export type SongsGetAllSongsError = unknown;

export type SongsCreateSongData = {
    body: SongCreate;
};

export type SongsCreateSongResponse = (SongRead);

export type SongsCreateSongError = (HTTPValidationError);

export type SongsGetSongData = {
    path: {
        song_id: number;
    };
};

export type SongsGetSongResponse = (SongRead);

export type SongsGetSongError = (HTTPValidationError);

export type SongsDeleteSongData = {
    path: {
        song_id: number;
    };
};

export type SongsDeleteSongResponse = (SongRead);

export type SongsDeleteSongError = (HTTPValidationError);

export type SongsUpdateSongData = {
    body: SongCreate;
    path: {
        song_id: number;
    };
};

export type SongsUpdateSongResponse = (SongRead);

export type SongsUpdateSongError = (HTTPValidationError);

export type SongsCategoryGetAllSongCategoriesResponse = (Array<SongCategoryRead>);

export type SongsCategoryGetAllSongCategoriesError = unknown;

export type SongsCategoryCreateSongCategoryData = {
    body: SongCategoryCreate;
};

export type SongsCategoryCreateSongCategoryResponse = (SongCategoryRead);

export type SongsCategoryCreateSongCategoryError = (HTTPValidationError);

export type SongsCategoryGetSongCategoryData = {
    path: {
        category_id: number;
    };
};

export type SongsCategoryGetSongCategoryResponse = (SongCategoryRead);

export type SongsCategoryGetSongCategoryError = (HTTPValidationError);

export type SongsCategoryDeleteSongCategoryData = {
    path: {
        category_id: number;
    };
};

export type SongsCategoryDeleteSongCategoryResponse = (SongCategoryRead);

export type SongsCategoryDeleteSongCategoryError = (HTTPValidationError);

export type SongsCategoryUpdateSongCategoryData = {
    body: SongCategoryCreate;
    path: {
        category_id: number;
    };
};

export type SongsCategoryUpdateSongCategoryResponse = (SongCategoryRead);

export type SongsCategoryUpdateSongCategoryError = (HTTPValidationError);

export type ImgUploadImageData = {
    body: Body_img_upload_image;
    query: {
        album_id: number;
    };
};

export type ImgUploadImageResponse = ({
    [key: string]: (string);
});

export type ImgUploadImageError = (HTTPValidationError);

export type ImgDeleteImageData = {
    path: {
        id: number;
    };
};

export type ImgDeleteImageResponse = ({
    [key: string]: (string);
});

export type ImgDeleteImageError = (HTTPValidationError);

export type ImgGetImageData = {
    path: {
        id: number;
    };
};

export type ImgGetImageResponse = (unknown);

export type ImgGetImageError = (HTTPValidationError);

export type AlbumsCreateAlbumData = {
    body: AlbumCreate;
};

export type AlbumsCreateAlbumResponse = ({
    [key: string]: (string);
});

export type AlbumsCreateAlbumError = (HTTPValidationError);

export type AlbumsGetOneAlbumData = {
    query: {
        id: number;
    };
};

export type AlbumsGetOneAlbumResponse = (AlbumRead);

export type AlbumsGetOneAlbumError = (HTTPValidationError);

export type AlbumsGetAlbumsResponse = (Array<AlbumRead>);

export type AlbumsGetAlbumsError = unknown;

export type AlbumsDeleteOneAlbumData = {
    query: {
        id: number;
    };
};

export type AlbumsDeleteOneAlbumResponse = ({
    [key: string]: (string);
});

export type AlbumsDeleteOneAlbumError = (HTTPValidationError);

export type AdsGetAllAdsResponse = (Array<AdRead>);

export type AdsGetAllAdsError = unknown;

export type AdsCreateAdData = {
    body: AdCreate;
};

export type AdsCreateAdResponse = (AdRead);

export type AdsCreateAdError = (HTTPValidationError);

export type AdsGetAdByIdData = {
    path: {
        id: number;
    };
};

export type AdsGetAdByIdResponse = (AdRead);

export type AdsGetAdByIdError = (HTTPValidationError);

export type AdsRemoveAdData = {
    path: {
        id: number;
    };
};

export type AdsRemoveAdResponse = (AdRead);

export type AdsRemoveAdError = (HTTPValidationError);

export type AdsGetAdByUserData = {
    path: {
        username: string;
    };
};

export type AdsGetAdByUserResponse = (Array<AdRead>);

export type AdsGetAdByUserError = (HTTPValidationError);

export type AdsGetBookAdByAuthorData = {
    path: {
        authorname: string;
    };
};

export type AdsGetBookAdByAuthorResponse = (Array<AdRead>);

export type AdsGetBookAdByAuthorError = (HTTPValidationError);

export type AdsGetBookAdByTitleData = {
    path: {
        stitle: string;
    };
};

export type AdsGetBookAdByTitleResponse = (Array<AdRead>);

export type AdsGetBookAdByTitleError = (HTTPValidationError);

export type AdsRemoveAdSuperUserData = {
    path: {
        id: number;
    };
};

export type AdsRemoveAdSuperUserResponse = (AdRead);

export type AdsRemoveAdSuperUserError = (HTTPValidationError);

export type AdsUpdateAdData = {
    body: AdUpdate;
    path: {
        id: number;
    };
};

export type AdsUpdateAdResponse = (AdRead);

export type AdsUpdateAdError = (HTTPValidationError);

export type CarsGetAllBookingResponse = (Array<CarRead>);

export type CarsGetAllBookingError = unknown;

export type CarsCreateBookingData = {
    body: CarCreate;
};

export type CarsCreateBookingResponse = (CarCreate);

export type CarsCreateBookingError = (HTTPValidationError);

export type CarsGetBookingData = {
    path: {
        booking_id: number;
    };
};

export type CarsGetBookingResponse = (CarRead);

export type CarsGetBookingError = (HTTPValidationError);

export type CarsRemoveBookingData = {
    path: {
        booking_id: number;
    };
};

export type CarsRemoveBookingResponse = (CarRead);

export type CarsRemoveBookingError = (HTTPValidationError);

export type CarsUpdateBookingData = {
    body: CarUpdate;
    path: {
        booking_id: number;
    };
};

export type CarsUpdateBookingResponse = (CarRead);

export type CarsUpdateBookingError = (HTTPValidationError);

export type ElectionsGetAllElectionsResponse = (Array<ElectionRead>);

export type ElectionsGetAllElectionsError = unknown;

export type ElectionsCreateElectionData = {
    body: ElectionCreate;
};

export type ElectionsCreateElectionResponse = (ElectionRead);

export type ElectionsCreateElectionError = (HTTPValidationError);

export type ElectionsGetElectionData = {
    path: {
        election_id: number;
    };
};

export type ElectionsGetElectionResponse = (ElectionRead);

export type ElectionsGetElectionError = (HTTPValidationError);

export type ElectionsDeleteElectionData = {
    path: {
        election_id: number;
    };
};

export type ElectionsDeleteElectionResponse = (ElectionRead);

export type ElectionsDeleteElectionError = (HTTPValidationError);

export type ElectionsAddPostToElectionData = {
    body: ElectionAddPosts;
    path: {
        election_id: number;
    };
};

export type ElectionsAddPostToElectionResponse = (ElectionRead);

export type ElectionsAddPostToElectionError = (HTTPValidationError);

export type CandidatesGetAllCandidationsData = {
    path: {
        election_id: number;
    };
};

export type CandidatesGetAllCandidationsResponse = (Array<CandidateRead>);

export type CandidatesGetAllCandidationsError = (HTTPValidationError);

export type CandidatesCreateCandidationData = {
    path: {
        election_id: number;
    };
    query: {
        post_id: number;
    };
};

export type CandidatesCreateCandidationResponse = (CandidateRead);

export type CandidatesCreateCandidationError = (HTTPValidationError);

export type CandidatesCreateCandidationsData = {
    body: CandidateElectionCreate;
    path: {
        election_id: number;
    };
};

export type CandidatesCreateCandidationsResponse = (CandidateRead);

export type CandidatesCreateCandidationsError = (HTTPValidationError);

export type AdventureMissionPostAdventureMissionData = {
    body: AdventureMissionCreate;
};

export type AdventureMissionPostAdventureMissionResponse = (AdventureMissionRead);

export type AdventureMissionPostAdventureMissionError = (HTTPValidationError);

export type AdventureMissionGetAllAdventureMissionsResponse = (Array<AdventureMissionRead>);

export type AdventureMissionGetAllAdventureMissionsError = unknown;

export type AdventureMissionGetAdventureMissionData = {
    path: {
        id: number;
    };
};

export type AdventureMissionGetAdventureMissionResponse = (AdventureMissionRead);

export type AdventureMissionGetAdventureMissionError = (HTTPValidationError);

export type AdventureMissionDeleteAdventureMissionData = {
    path: {
        id: number;
    };
};

export type AdventureMissionDeleteAdventureMissionResponse = (AdventureMissionRead);

export type AdventureMissionDeleteAdventureMissionError = (HTTPValidationError);

export type AdventureMissionPatchAdventureMissionData = {
    body: AdventureMissionCreate;
    path: {
        id: number;
    };
};

export type AdventureMissionPatchAdventureMissionResponse = (AdventureMissionRead);

export type AdventureMissionPatchAdventureMissionError = (HTTPValidationError);

export type GroupsUploadGroupData = {
    body: GroupCreate;
};

export type GroupsUploadGroupResponse = (GroupRead);

export type GroupsUploadGroupError = (HTTPValidationError);

export type GroupsGetGroupsData = {
    query?: {
        group_type?: ('Mentor' | 'Mission' | 'Default' | 'Committee' | null);
    };
};

export type GroupsGetGroupsResponse = (Array<GroupRead>);

export type GroupsGetGroupsError = (HTTPValidationError);

export type GroupsGetSingleGroupData = {
    path: {
        id: number;
    };
};

export type GroupsGetSingleGroupResponse = (GroupRead);

export type GroupsGetSingleGroupError = (HTTPValidationError);

export type GroupsPatchGroupData = {
    body: GroupCreate;
    path: {
        id: number;
    };
};

export type GroupsPatchGroupResponse = (GroupRead);

export type GroupsPatchGroupError = (HTTPValidationError);

export type GroupsRemoveGroupData = {
    path: {
        id: number;
    };
};

export type GroupsRemoveGroupResponse = (GroupRead);

export type GroupsRemoveGroupError = (HTTPValidationError);

export type GroupsAddUserToGroupData = {
    body: GroupAddUser;
    path: {
        id: number;
    };
};

export type GroupsAddUserToGroupResponse = (GroupRead);

export type GroupsAddUserToGroupError = (HTTPValidationError);

export type GroupsRemoveUserFromGroupData = {
    body: GroupRemoveUser;
    path: {
        id: number;
    };
};

export type GroupsRemoveUserFromGroupResponse = (GroupRead);

export type GroupsRemoveUserFromGroupError = (HTTPValidationError);

export type NollningPostNollningData = {
    body: NollningCreate;
};

export type NollningPostNollningResponse = (NollningRead);

export type NollningPostNollningError = (HTTPValidationError);

export type NollningGetAllNollningResponse = (Array<NollningRead>);

export type NollningGetAllNollningError = unknown;

export type NollningPatchNollningData = {
    body: NollningCreate;
    path: {
        id: number;
    };
};

export type NollningPatchNollningResponse = (NollningRead);

export type NollningPatchNollningError = (HTTPValidationError);

export type NollningDeleteNollningData = {
    path: {
        id: number;
    };
};

export type NollningDeleteNollningResponse = ({
    [key: string]: (string);
});

export type NollningDeleteNollningError = (HTTPValidationError);

export type NollningAddGroupToNollningData = {
    body: NollningAddGroup;
    path: {
        id: number;
    };
};

export type NollningAddGroupToNollningResponse = (NollningRead);

export type NollningAddGroupToNollningError = (HTTPValidationError);

export type NollningAddCompletedMissionData = {
    body: GroupMissionCreate;
    path: {
        id: number;
    };
};

export type NollningAddCompletedMissionResponse = (GroupMissionRead);

export type NollningAddCompletedMissionError = (HTTPValidationError);

export type NollningGetCompletedMissionsData = {
    path: {
        nollning_id: number;
    };
};

export type NollningGetCompletedMissionsResponse = (Array<GroupMissionRead>);

export type NollningGetCompletedMissionsError = (HTTPValidationError);

export type HelloRouteResponse = (unknown);

export type HelloRouteError = unknown;

export type UserOnlyuserOnlyResponse = (unknown);

export type UserOnlyuserOnlyError = unknown;

export type MemberOnlymemberOnlyResponse = (unknown);

export type MemberOnlymemberOnlyError = unknown;

export type ManageEventOnlypermissionRouteResponse = (unknown);

export type ManageEventOnlypermissionRouteError = unknown;