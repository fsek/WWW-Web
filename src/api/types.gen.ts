// This file is auto-generated by @hey-api/openapi-ts

export type AdCreate = {
    title: string;
    author: (string | null);
    price: (number | null);
    course: (string | null);
    user_id: number;
    selling: boolean;
    condition: number;
};

export type AdRead = {
    ad_id: number;
    title: string;
    author: (string | null);
    price: (number | null);
    course: (string | null);
    user_id: number;
    selling: boolean;
    condition: number;
};

export type AdUpdate = {
    title?: (string | null);
    author?: (string | null);
    price?: (number | null);
    course?: (string | null);
    selling?: (boolean | null);
    condition?: (number | null);
};

export type AlbumCreate = {
    name: string;
};

export type AlbumRead = {
    id: number;
    name: string;
    imgs: Array<ImgInAlbum>;
};

export type BearerResponse = {
    access_token: string;
    token_type: string;
};

export type Body_auth_reset_forgot_password = {
    email: string;
};

export type Body_auth_reset_reset_password = {
    token: string;
    password: string;
};

export type Body_auth_verify_request_token = {
    email: string;
};

export type Body_auth_verify_verify = {
    token: string;
};

export type Body_img_upload_image = {
    file: (Blob | File);
};

export type CarCreate = {
    description?: (string | null);
    start_time: Date;
    end_time: Date;
};

export type CarRead = {
    booking_id: number;
    user_id: number;
    description: string;
    start_time: Date;
    end_time: Date;
};

export type CarUpdate = {
    description?: (string | null);
    start_time?: (Date | null);
    end_time?: (Date | null);
};

export type ErrorModel = {
    detail: (string | {
    [key: string]: (string);
});
};

export type EventCreate = {
    council_id: number;
    starts_at: Date;
    ends_at: Date;
    signup_start: Date;
    signup_end: Date;
    title_sv: string;
    title_en: string;
    description_sv: string;
    description_en: string;
    max_event_users: number;
    priorities: Array<('photographer' | 'ordfÃ¶rande' | 'dinmamma')>;
};

export type EventRead = {
    id: number;
    starts_at: Date;
    ends_at: Date;
    signup_start: Date;
    signup_end: Date;
    title_sv: string;
    title_en: string;
    description_sv: string;
    description_en: string;
    max_event_users: number;
    priorities: Array<Priority_DB>;
};

export type EventSignupCreate = {
    priority: (string | null);
};

export type EventUpdate = {
    title_sv?: (string | null);
    title_en?: (string | null);
    description_sv?: (string | null);
    description_en?: (string | null);
    max_event_users?: (number | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ImgInAlbum = {
    id: number;
};

export type MeUpdate = {
    first_name?: (string | null);
    last_name?: (string | null);
    start_year?: (number | null);
    program?: (string | null);
};

export type NewsCreate = {
    title_sv: string;
    title_en: string;
    content_sv: string;
    content_en: string;
    pinned_from?: (Date | null);
    pinned_to?: (Date | null);
};

export type NewsRead = {
    id: number;
    title_sv: string;
    title_en: string;
    content_sv: string;
    content_en: string;
    author_id: number;
    created_at: Date;
    bumped_at: (Date | null);
    pinned_from: (Date | null);
    pinned_to: (Date | null);
};

export type NewsUpdate = {
    title_sv?: (string | null);
    title_en?: (string | null);
    content_sv?: (string | null);
    content_en?: (string | null);
    pinned_from?: (Date | null);
    pinned_to?: (Date | null);
};

export type PermissionCreate = {
    action: 'view' | 'manage';
    target: 'Event' | 'User' | 'Post' | 'Permission' | 'News' | 'Song' | 'Ads' | 'Gallery' | 'Car';
};

export enum action {
    VIEW = 'view',
    MANAGE = 'manage'
}

export enum target {
    EVENT = 'Event',
    USER = 'User',
    POST = 'Post',
    PERMISSION = 'Permission',
    NEWS = 'News',
    SONG = 'Song',
    ADS = 'Ads',
    GALLERY = 'Gallery',
    CAR = 'Car'
}

export type PermissionRead = {
    id: number;
    action: 'view' | 'manage';
    target: 'Event' | 'User' | 'Post' | 'Permission' | 'News' | 'Song' | 'Ads' | 'Gallery' | 'Car';
};

export type PostCreate = {
    name: string;
    council_id: number;
};

export type PostRead = {
    id: number;
    name: string;
    council_id: number;
    permissions: Array<_PostPermissionRead>;
};

export type Priority_DB = {
    priority: string;
    event_id: number;
};

export type SongCategoryCreate = {
    name: string;
};

export type SongCategoryRead = {
    id: (number | null);
    name: string;
};

export type SongCreate = {
    title: string;
    author: (string | null);
    melody: (string | null);
    content: string;
    category: SongCategoryRead;
};

export type SongRead = {
    id: number;
    title: string;
    author: (string | null);
    melody: (string | null);
    content: string;
    category: (SongCategoryRead | null);
    views: number;
};

export type UpdatePermission = {
    post_id: number;
    change: 'add' | 'remove';
    permission_id: number;
};

export enum change {
    ADD = 'add',
    REMOVE = 'remove'
}

export type UpdateUserMember = {
    is_member: boolean;
};

export type UserCreate = {
    email: string;
    password: string;
    is_active?: (boolean | null);
    is_superuser?: (boolean | null);
    is_verified?: (boolean | null);
    first_name: string;
    last_name: string;
    telephone_number?: (string | null);
    start_year?: (number | null);
    program?: (string | null);
};

export type UserRead = {
    id: number;
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    is_verified?: boolean;
    first_name: string;
    last_name: string;
    posts: Array<_UserPostRead>;
    events: Array<_UserEventRead>;
    telephone_number: string;
    start_year: number;
    account_created: Date;
};

export type UserSignupRead = {
    id: number;
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    is_verified?: boolean;
    first_name: string;
    last_name: string;
    telephone_number: string;
    start_year: number;
    account_created: Date;
    program: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type _PostPermissionRead = {
    id: number;
    action: string;
    target: string;
};

export type _UserEventRead = {
    id: number;
};

export type _UserPostRead = {
    id: number;
    name: string;
    council_id: number;
};

export type login = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type UsersGetAllUsersResponse = (Array<UserRead>);

export type UsersGetAllUsersError = unknown;

export type UsersGetMeResponse = (UserRead);

export type UsersGetMeError = unknown;

export type UsersUpdateMeData = {
    body: MeUpdate;
};

export type UsersUpdateMeResponse = (UserRead);

export type UsersUpdateMeError = (HTTPValidationError);

export type UsersUpdateUserData = {
    body: UpdateUserMember;
    path: {
        user_id: number;
    };
};

export type UsersUpdateUserResponse = (unknown);

export type UsersUpdateUserError = (HTTPValidationError);

export type PostsGetAllPostsResponse = (Array<PostRead>);

export type PostsGetAllPostsError = unknown;

export type PostsCreatePostData = {
    body: PostCreate;
};

export type PostsCreatePostResponse = (PostRead);

export type PostsCreatePostError = (HTTPValidationError);

export type PostsDeletePostData = {
    path: {
        post_id: number;
    };
};

export type PostsDeletePostResponse = (void);

export type PostsDeletePostError = (HTTPValidationError);

export type PermissionsGetAllPermissionsResponse = (Array<PermissionRead>);

export type PermissionsGetAllPermissionsError = unknown;

export type PermissionsCreatePermissionData = {
    body: PermissionCreate;
};

export type PermissionsCreatePermissionResponse = (PermissionRead);

export type PermissionsCreatePermissionError = (HTTPValidationError);

export type PermissionsChangePostPermissionData = {
    body: UpdatePermission;
};

export type PermissionsChangePostPermissionResponse = (unknown);

export type PermissionsChangePostPermissionError = (HTTPValidationError);

export type AuthAuthJwtLoginData = {
    body: login;
};

export type AuthAuthJwtLoginResponse = (BearerResponse);

export type AuthAuthJwtLoginError = (ErrorModel | HTTPValidationError);

export type AuthAuthJwtLogoutResponse = (unknown);

export type AuthAuthJwtLogoutError = (unknown);

export type AuthRegisterRegisterData = {
    body: UserCreate;
};

export type AuthRegisterRegisterResponse = (UserRead);

export type AuthRegisterRegisterError = (ErrorModel | HTTPValidationError);

export type AuthResetForgotPasswordData = {
    body: Body_auth_reset_forgot_password;
};

export type AuthResetForgotPasswordResponse = (unknown);

export type AuthResetForgotPasswordError = (HTTPValidationError);

export type AuthResetResetPasswordData = {
    body: Body_auth_reset_reset_password;
};

export type AuthResetResetPasswordResponse = (unknown);

export type AuthResetResetPasswordError = (ErrorModel | HTTPValidationError);

export type AuthVerifyRequestTokenData = {
    body: Body_auth_verify_request_token;
};

export type AuthVerifyRequestTokenResponse = (unknown);

export type AuthVerifyRequestTokenError = (HTTPValidationError);

export type AuthVerifyVerifyData = {
    body: Body_auth_verify_verify;
};

export type AuthVerifyVerifyResponse = (UserRead);

export type AuthVerifyVerifyError = (ErrorModel | HTTPValidationError);

export type EventsGetAllEventsResponse = (Array<EventRead>);

export type EventsGetAllEventsError = unknown;

export type EventsCreateEventData = {
    body: EventCreate;
};

export type EventsCreateEventResponse = (EventRead);

export type EventsCreateEventError = (HTTPValidationError);

export type EventsRemoveData = {
    path: {
        event_id: number;
    };
};

export type EventsRemoveResponse = (void);

export type EventsRemoveError = (HTTPValidationError);

export type EventsUpdateData = {
    body: EventUpdate;
    path: {
        event_id: number;
    };
};

export type EventsUpdateResponse = (EventRead);

export type EventsUpdateError = (HTTPValidationError);

export type EventsGetRandomSignupData = {
    path: {
        event_id: number;
    };
};

export type EventsGetRandomSignupResponse = (Array<UserRead>);

export type EventsGetRandomSignupError = (HTTPValidationError);

export type EventsGetAllSignupsData = {
    path: {
        event_id: number;
    };
};

export type EventsGetAllSignupsResponse = (Array<UserRead>);

export type EventsGetAllSignupsError = (HTTPValidationError);

export type EventSignupSignupRouteData = {
    body: EventSignupCreate;
    path: {
        event_id: number;
    };
};

export type EventSignupSignupRouteResponse = (EventRead);

export type EventSignupSignupRouteError = (HTTPValidationError);

export type EventSignupGetAllSignupsData = {
    path: {
        event_id: number;
    };
};

export type EventSignupGetAllSignupsResponse = (Array<UserSignupRead>);

export type EventSignupGetAllSignupsError = (HTTPValidationError);

export type NewsGetAllNewsResponse = (Array<NewsRead>);

export type NewsGetAllNewsError = unknown;

export type NewsGetAmountOfNewsData = {
    path: {
        amount: number;
    };
};

export type NewsGetAmountOfNewsResponse = (Array<NewsRead>);

export type NewsGetAmountOfNewsError = (HTTPValidationError);

export type NewsGetNewsData = {
    path: {
        news_id: number;
    };
};

export type NewsGetNewsResponse = (NewsRead);

export type NewsGetNewsError = (HTTPValidationError);

export type NewsDeleteNewsData = {
    path: {
        news_id: number;
    };
};

export type NewsDeleteNewsResponse = (void);

export type NewsDeleteNewsError = (HTTPValidationError);

export type NewsUpdateNewsData = {
    body: NewsUpdate;
    path: {
        news_id: number;
    };
};

export type NewsUpdateNewsResponse = (NewsRead);

export type NewsUpdateNewsError = (HTTPValidationError);

export type NewsCreateNewsData = {
    body: NewsCreate;
};

export type NewsCreateNewsResponse = (NewsRead);

export type NewsCreateNewsError = (HTTPValidationError);

export type NewsBumpNewsData = {
    path: {
        news_id: number;
    };
};

export type NewsBumpNewsResponse = (NewsRead);

export type NewsBumpNewsError = (HTTPValidationError);

export type SongsGetAllSongsResponse = (Array<SongRead>);

export type SongsGetAllSongsError = unknown;

export type SongsCreateSongData = {
    body: SongCreate;
};

export type SongsCreateSongResponse = (SongRead);

export type SongsCreateSongError = (HTTPValidationError);

export type SongsGetSongData = {
    path: {
        song_id: number;
    };
};

export type SongsGetSongResponse = (SongRead);

export type SongsGetSongError = (HTTPValidationError);

export type SongsDeleteSongData = {
    path: {
        song_id: number;
    };
};

export type SongsDeleteSongResponse = (SongRead);

export type SongsDeleteSongError = (HTTPValidationError);

export type SongsUpdateSongData = {
    body: SongCreate;
    path: {
        song_id: number;
    };
};

export type SongsUpdateSongResponse = (SongRead);

export type SongsUpdateSongError = (HTTPValidationError);

export type SongsCategoryGetAllSongCategoriesResponse = (Array<SongCategoryRead>);

export type SongsCategoryGetAllSongCategoriesError = unknown;

export type SongsCategoryCreateSongCategoryData = {
    body: SongCategoryCreate;
};

export type SongsCategoryCreateSongCategoryResponse = (SongCategoryRead);

export type SongsCategoryCreateSongCategoryError = (HTTPValidationError);

export type SongsCategoryGetSongCategoryData = {
    path: {
        category_id: number;
    };
};

export type SongsCategoryGetSongCategoryResponse = (SongCategoryRead);

export type SongsCategoryGetSongCategoryError = (HTTPValidationError);

export type SongsCategoryDeleteSongCategoryData = {
    path: {
        category_id: number;
    };
};

export type SongsCategoryDeleteSongCategoryResponse = (SongCategoryRead);

export type SongsCategoryDeleteSongCategoryError = (HTTPValidationError);

export type SongsCategoryUpdateSongCategoryData = {
    body: SongCategoryCreate;
    path: {
        category_id: number;
    };
};

export type SongsCategoryUpdateSongCategoryResponse = (SongCategoryRead);

export type SongsCategoryUpdateSongCategoryError = (HTTPValidationError);

export type ImgUploadImageData = {
    body: Body_img_upload_image;
    query: {
        album_id: number;
    };
};

export type ImgUploadImageResponse = ({
    [key: string]: (string);
});

export type ImgUploadImageError = (HTTPValidationError);

export type ImgDeleteImageData = {
    path: {
        id: number;
    };
};

export type ImgDeleteImageResponse = ({
    [key: string]: (string);
});

export type ImgDeleteImageError = (HTTPValidationError);

export type ImgGetImageData = {
    path: {
        id: number;
    };
};

export type ImgGetImageResponse = (unknown);

export type ImgGetImageError = (HTTPValidationError);

export type AlbumsCreateAlbumData = {
    body: AlbumCreate;
};

export type AlbumsCreateAlbumResponse = ({
    [key: string]: (string);
});

export type AlbumsCreateAlbumError = (HTTPValidationError);

export type AlbumsGetOneAlbumData = {
    query: {
        id: number;
    };
};

export type AlbumsGetOneAlbumResponse = (AlbumRead);

export type AlbumsGetOneAlbumError = (HTTPValidationError);

export type AlbumsGetAlbumsResponse = (Array<AlbumRead>);

export type AlbumsGetAlbumsError = unknown;

export type AlbumsDeleteOneAlbumData = {
    query: {
        id: number;
    };
};

export type AlbumsDeleteOneAlbumResponse = ({
    [key: string]: (string);
});

export type AlbumsDeleteOneAlbumError = (HTTPValidationError);

export type AdsGetAllAdsResponse = (Array<AdRead>);

export type AdsGetAllAdsError = unknown;

export type AdsCreateAdData = {
    body: AdCreate;
};

export type AdsCreateAdResponse = (AdRead);

export type AdsCreateAdError = (HTTPValidationError);

export type AdsGetAdByIdData = {
    path: {
        id: number;
    };
};

export type AdsGetAdByIdResponse = (AdRead);

export type AdsGetAdByIdError = (HTTPValidationError);

export type AdsRemoveAdData = {
    path: {
        id: number;
    };
};

export type AdsRemoveAdResponse = (AdRead);

export type AdsRemoveAdError = (HTTPValidationError);

export type AdsGetAdByUserData = {
    path: {
        username: string;
    };
};

export type AdsGetAdByUserResponse = (Array<AdRead>);

export type AdsGetAdByUserError = (HTTPValidationError);

export type AdsGetBookAdByAuthorData = {
    path: {
        authorname: string;
    };
};

export type AdsGetBookAdByAuthorResponse = (Array<AdRead>);

export type AdsGetBookAdByAuthorError = (HTTPValidationError);

export type AdsGetBookAdByTitleData = {
    path: {
        stitle: string;
    };
};

export type AdsGetBookAdByTitleResponse = (Array<AdRead>);

export type AdsGetBookAdByTitleError = (HTTPValidationError);

export type AdsRemoveAdSuperUserData = {
    path: {
        id: number;
    };
};

export type AdsRemoveAdSuperUserResponse = (AdRead);

export type AdsRemoveAdSuperUserError = (HTTPValidationError);

export type AdsUpdateAdData = {
    body: AdUpdate;
    path: {
        id: number;
    };
};

export type AdsUpdateAdResponse = (AdRead);

export type AdsUpdateAdError = (HTTPValidationError);

export type CarsGetAllBookingResponse = (Array<CarRead>);

export type CarsGetAllBookingError = unknown;

export type CarsCreateBookingData = {
    body: CarCreate;
};

export type CarsCreateBookingResponse = (CarCreate);

export type CarsCreateBookingError = (HTTPValidationError);

export type CarsGetBookingData = {
    path: {
        booking_id: number;
    };
};

export type CarsGetBookingResponse = (CarRead);

export type CarsGetBookingError = (HTTPValidationError);

export type CarsRemoveBookingData = {
    path: {
        booking_id: number;
    };
};

export type CarsRemoveBookingResponse = (CarRead);

export type CarsRemoveBookingError = (HTTPValidationError);

export type CarsUpdateBookingData = {
    body: CarUpdate;
    path: {
        booking_id: number;
    };
};

export type CarsUpdateBookingResponse = (CarRead);

export type CarsUpdateBookingError = (HTTPValidationError);

export type HelloRouteResponse = (unknown);

export type HelloRouteError = unknown;

export type UserOnlyuserOnlyResponse = (unknown);

export type UserOnlyuserOnlyError = unknown;

export type MemberOnlymemberOnlyResponse = (unknown);

export type MemberOnlymemberOnlyError = unknown;

export type ManageEventOnlypermissionRouteResponse = (unknown);

export type ManageEventOnlypermissionRouteError = unknown;

export type UsersGetAllUsersResponseTransformer = (data: any) => Promise<UsersGetAllUsersResponse>;

export type UserReadModelResponseTransformer = (data: any) => UserRead;

export const UserReadModelResponseTransformer: UserReadModelResponseTransformer = data => {
    if (data?.account_created) {
        data.account_created = new Date(data.account_created);
    }
    return data;
};

export const UsersGetAllUsersResponseTransformer: UsersGetAllUsersResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(UserReadModelResponseTransformer);
    }
    return data;
};

export type UsersGetMeResponseTransformer = (data: any) => Promise<UsersGetMeResponse>;

export const UsersGetMeResponseTransformer: UsersGetMeResponseTransformer = async (data) => {
    UserReadModelResponseTransformer(data);
    return data;
};

export type UsersUpdateMeResponseTransformer = (data: any) => Promise<UsersUpdateMeResponse>;

export const UsersUpdateMeResponseTransformer: UsersUpdateMeResponseTransformer = async (data) => {
    UserReadModelResponseTransformer(data);
    return data;
};

export type AuthRegisterRegisterResponseTransformer = (data: any) => Promise<AuthRegisterRegisterResponse>;

export const AuthRegisterRegisterResponseTransformer: AuthRegisterRegisterResponseTransformer = async (data) => {
    UserReadModelResponseTransformer(data);
    return data;
};

export type AuthVerifyVerifyResponseTransformer = (data: any) => Promise<AuthVerifyVerifyResponse>;

export const AuthVerifyVerifyResponseTransformer: AuthVerifyVerifyResponseTransformer = async (data) => {
    UserReadModelResponseTransformer(data);
    return data;
};

export type EventsGetAllEventsResponseTransformer = (data: any) => Promise<EventsGetAllEventsResponse>;

export type EventReadModelResponseTransformer = (data: any) => EventRead;

export const EventReadModelResponseTransformer: EventReadModelResponseTransformer = data => {
    if (data?.starts_at) {
        data.starts_at = new Date(data.starts_at);
    }
    if (data?.ends_at) {
        data.ends_at = new Date(data.ends_at);
    }
    if (data?.signup_start) {
        data.signup_start = new Date(data.signup_start);
    }
    if (data?.signup_end) {
        data.signup_end = new Date(data.signup_end);
    }
    return data;
};

export const EventsGetAllEventsResponseTransformer: EventsGetAllEventsResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(EventReadModelResponseTransformer);
    }
    return data;
};

export type EventsCreateEventResponseTransformer = (data: any) => Promise<EventsCreateEventResponse>;

export const EventsCreateEventResponseTransformer: EventsCreateEventResponseTransformer = async (data) => {
    EventReadModelResponseTransformer(data);
    return data;
};

export type EventsUpdateResponseTransformer = (data: any) => Promise<EventsUpdateResponse>;

export const EventsUpdateResponseTransformer: EventsUpdateResponseTransformer = async (data) => {
    EventReadModelResponseTransformer(data);
    return data;
};

export type EventsGetRandomSignupResponseTransformer = (data: any) => Promise<EventsGetRandomSignupResponse>;

export const EventsGetRandomSignupResponseTransformer: EventsGetRandomSignupResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(UserReadModelResponseTransformer);
    }
    return data;
};

export type EventsGetAllSignupsResponseTransformer = (data: any) => Promise<EventsGetAllSignupsResponse>;

export const EventsGetAllSignupsResponseTransformer: EventsGetAllSignupsResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(UserReadModelResponseTransformer);
    }
    return data;
};

export type EventSignupSignupRouteResponseTransformer = (data: any) => Promise<EventSignupSignupRouteResponse>;

export const EventSignupSignupRouteResponseTransformer: EventSignupSignupRouteResponseTransformer = async (data) => {
    EventReadModelResponseTransformer(data);
    return data;
};

export type EventSignupGetAllSignupsResponseTransformer = (data: any) => Promise<EventSignupGetAllSignupsResponse>;

export type UserSignupReadModelResponseTransformer = (data: any) => UserSignupRead;

export const UserSignupReadModelResponseTransformer: UserSignupReadModelResponseTransformer = data => {
    if (data?.account_created) {
        data.account_created = new Date(data.account_created);
    }
    return data;
};

export const EventSignupGetAllSignupsResponseTransformer: EventSignupGetAllSignupsResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(UserSignupReadModelResponseTransformer);
    }
    return data;
};

export type NewsGetAllNewsResponseTransformer = (data: any) => Promise<NewsGetAllNewsResponse>;

export type NewsReadModelResponseTransformer = (data: any) => NewsRead;

export const NewsReadModelResponseTransformer: NewsReadModelResponseTransformer = data => {
    if (data?.created_at) {
        data.created_at = new Date(data.created_at);
    }
    return data;
};

export const NewsGetAllNewsResponseTransformer: NewsGetAllNewsResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(NewsReadModelResponseTransformer);
    }
    return data;
};

export type NewsGetAmountOfNewsResponseTransformer = (data: any) => Promise<NewsGetAmountOfNewsResponse>;

export const NewsGetAmountOfNewsResponseTransformer: NewsGetAmountOfNewsResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(NewsReadModelResponseTransformer);
    }
    return data;
};

export type NewsGetNewsResponseTransformer = (data: any) => Promise<NewsGetNewsResponse>;

export const NewsGetNewsResponseTransformer: NewsGetNewsResponseTransformer = async (data) => {
    NewsReadModelResponseTransformer(data);
    return data;
};

export type NewsUpdateNewsResponseTransformer = (data: any) => Promise<NewsUpdateNewsResponse>;

export const NewsUpdateNewsResponseTransformer: NewsUpdateNewsResponseTransformer = async (data) => {
    NewsReadModelResponseTransformer(data);
    return data;
};

export type NewsCreateNewsResponseTransformer = (data: any) => Promise<NewsCreateNewsResponse>;

export const NewsCreateNewsResponseTransformer: NewsCreateNewsResponseTransformer = async (data) => {
    NewsReadModelResponseTransformer(data);
    return data;
};

export type NewsBumpNewsResponseTransformer = (data: any) => Promise<NewsBumpNewsResponse>;

export const NewsBumpNewsResponseTransformer: NewsBumpNewsResponseTransformer = async (data) => {
    NewsReadModelResponseTransformer(data);
    return data;
};

export type CarsGetAllBookingResponseTransformer = (data: any) => Promise<CarsGetAllBookingResponse>;

export type CarReadModelResponseTransformer = (data: any) => CarRead;

export const CarReadModelResponseTransformer: CarReadModelResponseTransformer = data => {
    if (data?.start_time) {
        data.start_time = new Date(data.start_time);
    }
    if (data?.end_time) {
        data.end_time = new Date(data.end_time);
    }
    return data;
};

export const CarsGetAllBookingResponseTransformer: CarsGetAllBookingResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(CarReadModelResponseTransformer);
    }
    return data;
};

export type CarsCreateBookingResponseTransformer = (data: any) => Promise<CarsCreateBookingResponse>;

export type CarCreateModelResponseTransformer = (data: any) => CarCreate;

export const CarCreateModelResponseTransformer: CarCreateModelResponseTransformer = data => {
    if (data?.start_time) {
        data.start_time = new Date(data.start_time);
    }
    if (data?.end_time) {
        data.end_time = new Date(data.end_time);
    }
    return data;
};

export const CarsCreateBookingResponseTransformer: CarsCreateBookingResponseTransformer = async (data) => {
    CarCreateModelResponseTransformer(data);
    return data;
};

export type CarsGetBookingResponseTransformer = (data: any) => Promise<CarsGetBookingResponse>;

export const CarsGetBookingResponseTransformer: CarsGetBookingResponseTransformer = async (data) => {
    CarReadModelResponseTransformer(data);
    return data;
};

export type CarsRemoveBookingResponseTransformer = (data: any) => Promise<CarsRemoveBookingResponse>;

export const CarsRemoveBookingResponseTransformer: CarsRemoveBookingResponseTransformer = async (data) => {
    CarReadModelResponseTransformer(data);
    return data;
};

export type CarsUpdateBookingResponseTransformer = (data: any) => Promise<CarsUpdateBookingResponse>;

export const CarsUpdateBookingResponseTransformer: CarsUpdateBookingResponseTransformer = async (data) => {
    CarReadModelResponseTransformer(data);
    return data;
};