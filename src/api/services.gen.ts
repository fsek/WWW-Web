// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, urlSearchParamsBodySerializer, formDataBodySerializer } from '@hey-api/client-fetch';
import type { UsersGetAllUsersError, UsersGetAllUsersResponse, UsersGetMeError, UsersGetMeResponse, UsersUpdateMeData, UsersUpdateMeError, UsersUpdateMeResponse, UsersUpdateUserData, UsersUpdateUserError, UsersUpdateUserResponse, PostsGetAllPostsError, PostsGetAllPostsResponse, PostsCreatePostData, PostsCreatePostError, PostsCreatePostResponse, PostsDeletePostData, PostsDeletePostError, PostsDeletePostResponse, PermissionsGetAllPermissionsError, PermissionsGetAllPermissionsResponse, PermissionsCreatePermissionData, PermissionsCreatePermissionError, PermissionsCreatePermissionResponse, PermissionsChangePostPermissionData, PermissionsChangePostPermissionError, PermissionsChangePostPermissionResponse, AuthAuthJwtLoginData, AuthAuthJwtLoginError, AuthAuthJwtLoginResponse, AuthAuthJwtLogoutError, AuthAuthJwtLogoutResponse, AuthRegisterRegisterData, AuthRegisterRegisterError, AuthRegisterRegisterResponse, AuthResetForgotPasswordData, AuthResetForgotPasswordError, AuthResetForgotPasswordResponse, AuthResetResetPasswordData, AuthResetResetPasswordError, AuthResetResetPasswordResponse, AuthVerifyRequestTokenData, AuthVerifyRequestTokenError, AuthVerifyRequestTokenResponse, AuthVerifyVerifyData, AuthVerifyVerifyError, AuthVerifyVerifyResponse, EventsGetAllEventsError, EventsGetAllEventsResponse, EventsCreateEventData, EventsCreateEventError, EventsCreateEventResponse, EventsRemoveData, EventsRemoveError, EventsRemoveResponse, EventsUpdateData, EventsUpdateError, EventsUpdateResponse, EventsGetRandomSignupData, EventsGetRandomSignupError, EventsGetRandomSignupResponse, EventsGetAllSignupsData, EventsGetAllSignupsError, EventsGetAllSignupsResponse, EventSignupSignupRouteData, EventSignupSignupRouteError, EventSignupSignupRouteResponse, EventSignupSignoffRouteData, EventSignupSignoffRouteError, EventSignupSignoffRouteResponse, EventSignupUpdateSignupData, EventSignupUpdateSignupError, EventSignupUpdateSignupResponse, NewsGetAllNewsError, NewsGetAllNewsResponse, NewsGetNewsData, NewsGetNewsError, NewsGetNewsResponse, NewsDeleteNewsData, NewsDeleteNewsError, NewsDeleteNewsResponse, NewsUpdateNewsData, NewsUpdateNewsError, NewsUpdateNewsResponse, NewsCreateNewsData, NewsCreateNewsError, NewsCreateNewsResponse, NewsBumpNewsData, NewsBumpNewsError, NewsBumpNewsResponse, NewsGetPaginatedNewsData, NewsGetPaginatedNewsError, NewsGetPaginatedNewsResponse, CafeViewAllShiftsError, CafeViewAllShiftsResponse, CafeViewShiftData, CafeViewShiftError, CafeViewShiftResponse, CafeDeleteShiftData, CafeDeleteShiftError, CafeDeleteShiftResponse, CafeViewShiftsBetweenDatesData, CafeViewShiftsBetweenDatesError, CafeViewShiftsBetweenDatesResponse, CafeCreateShiftData, CafeCreateShiftError, CafeCreateShiftResponse, CafeUpdateShiftData, CafeUpdateShiftError, CafeUpdateShiftResponse, CafeSignupToShiftData, CafeSignupToShiftError, CafeSignupToShiftResponse, CafeSignoffFromShiftData, CafeSignoffFromShiftError, CafeSignoffFromShiftResponse, SongsGetAllSongsError, SongsGetAllSongsResponse, SongsCreateSongData, SongsCreateSongError, SongsCreateSongResponse, SongsGetSongData, SongsGetSongError, SongsGetSongResponse, SongsDeleteSongData, SongsDeleteSongError, SongsDeleteSongResponse, SongsUpdateSongData, SongsUpdateSongError, SongsUpdateSongResponse, SongsCategoryGetAllSongCategoriesError, SongsCategoryGetAllSongCategoriesResponse, SongsCategoryCreateSongCategoryData, SongsCategoryCreateSongCategoryError, SongsCategoryCreateSongCategoryResponse, SongsCategoryGetSongCategoryData, SongsCategoryGetSongCategoryError, SongsCategoryGetSongCategoryResponse, SongsCategoryDeleteSongCategoryData, SongsCategoryDeleteSongCategoryError, SongsCategoryDeleteSongCategoryResponse, SongsCategoryUpdateSongCategoryData, SongsCategoryUpdateSongCategoryError, SongsCategoryUpdateSongCategoryResponse, ImgUploadImageData, ImgUploadImageError, ImgUploadImageResponse, ImgDeleteImageData, ImgDeleteImageError, ImgDeleteImageResponse, ImgGetImageData, ImgGetImageError, ImgGetImageResponse, AlbumsCreateAlbumData, AlbumsCreateAlbumError, AlbumsCreateAlbumResponse, AlbumsGetOneAlbumData, AlbumsGetOneAlbumError, AlbumsGetOneAlbumResponse, AlbumsGetAlbumsError, AlbumsGetAlbumsResponse, AlbumsDeleteOneAlbumData, AlbumsDeleteOneAlbumError, AlbumsDeleteOneAlbumResponse, AdsGetAllAdsError, AdsGetAllAdsResponse, AdsCreateAdData, AdsCreateAdError, AdsCreateAdResponse, AdsGetAdByIdData, AdsGetAdByIdError, AdsGetAdByIdResponse, AdsRemoveAdData, AdsRemoveAdError, AdsRemoveAdResponse, AdsGetAdByUserData, AdsGetAdByUserError, AdsGetAdByUserResponse, AdsGetBookAdByAuthorData, AdsGetBookAdByAuthorError, AdsGetBookAdByAuthorResponse, AdsGetBookAdByTitleData, AdsGetBookAdByTitleError, AdsGetBookAdByTitleResponse, AdsRemoveAdSuperUserData, AdsRemoveAdSuperUserError, AdsRemoveAdSuperUserResponse, AdsUpdateAdData, AdsUpdateAdError, AdsUpdateAdResponse, CarsGetAllBookingError, CarsGetAllBookingResponse, CarsCreateBookingData, CarsCreateBookingError, CarsCreateBookingResponse, CarsGetBookingData, CarsGetBookingError, CarsGetBookingResponse, CarsRemoveBookingData, CarsRemoveBookingError, CarsRemoveBookingResponse, CarsUpdateBookingData, CarsUpdateBookingError, CarsUpdateBookingResponse, ElectionsGetAllElectionsError, ElectionsGetAllElectionsResponse, ElectionsCreateElectionData, ElectionsCreateElectionError, ElectionsCreateElectionResponse, ElectionsGetElectionData, ElectionsGetElectionError, ElectionsGetElectionResponse, ElectionsDeleteElectionData, ElectionsDeleteElectionError, ElectionsDeleteElectionResponse, ElectionsAddPostToElectionData, ElectionsAddPostToElectionError, ElectionsAddPostToElectionResponse, CandidatesGetAllCandidationsData, CandidatesGetAllCandidationsError, CandidatesGetAllCandidationsResponse, CandidatesCreateCandidationData, CandidatesCreateCandidationError, CandidatesCreateCandidationResponse, CandidatesCreateCandidationsData, CandidatesCreateCandidationsError, CandidatesCreateCandidationsResponse, AdventureMissionPostAdventureMissionData, AdventureMissionPostAdventureMissionError, AdventureMissionPostAdventureMissionResponse, AdventureMissionGetAllAdventureMissionsError, AdventureMissionGetAllAdventureMissionsResponse, AdventureMissionGetAdventureMissionData, AdventureMissionGetAdventureMissionError, AdventureMissionGetAdventureMissionResponse, AdventureMissionDeleteAdventureMissionData, AdventureMissionDeleteAdventureMissionError, AdventureMissionDeleteAdventureMissionResponse, AdventureMissionPatchAdventureMissionData, AdventureMissionPatchAdventureMissionError, AdventureMissionPatchAdventureMissionResponse, GroupsUploadGroupData, GroupsUploadGroupError, GroupsUploadGroupResponse, GroupsGetGroupsData, GroupsGetGroupsError, GroupsGetGroupsResponse, GroupsGetSingleGroupData, GroupsGetSingleGroupError, GroupsGetSingleGroupResponse, GroupsPatchGroupData, GroupsPatchGroupError, GroupsPatchGroupResponse, GroupsRemoveGroupData, GroupsRemoveGroupError, GroupsRemoveGroupResponse, GroupsAddUserToGroupData, GroupsAddUserToGroupError, GroupsAddUserToGroupResponse, GroupsRemoveUserFromGroupData, GroupsRemoveUserFromGroupError, GroupsRemoveUserFromGroupResponse, NollningPostNollningData, NollningPostNollningError, NollningPostNollningResponse, NollningGetAllNollningError, NollningGetAllNollningResponse, NollningPatchNollningData, NollningPatchNollningError, NollningPatchNollningResponse, NollningDeleteNollningData, NollningDeleteNollningError, NollningDeleteNollningResponse, NollningAddGroupToNollningData, NollningAddGroupToNollningError, NollningAddGroupToNollningResponse, NollningAddCompletedMissionData, NollningAddCompletedMissionError, NollningAddCompletedMissionResponse, NollningGetCompletedMissionsData, NollningGetCompletedMissionsError, NollningGetCompletedMissionsResponse, TagsGetTagsError, TagsGetTagsResponse, TagsPostTagData, TagsPostTagError, TagsPostTagResponse, HelloRouteError, HelloRouteResponse, UserOnlyuserOnlyError, UserOnlyuserOnlyResponse, MemberOnlymemberOnlyError, MemberOnlymemberOnlyResponse, ManageEventOnlypermissionRouteError, ManageEventOnlypermissionRouteResponse } from './types.gen';

export const client = createClient(createConfig());

export class UsersService {
    /**
     * Get All Users
     */
    public static getAllUsers<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<UsersGetAllUsersResponse, UsersGetAllUsersError, ThrowOnError>({
            ...options,
            url: '/users/'
        });
    }
    
    /**
     * Get Me
     */
    public static getMe<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<UsersGetMeResponse, UsersGetMeError, ThrowOnError>({
            ...options,
            url: '/users/me'
        });
    }
    
    /**
     * Update Me
     */
    public static updateMe<ThrowOnError extends boolean = false>(options: Options<UsersUpdateMeData, ThrowOnError>) {
        return (options?.client ?? client).patch<UsersUpdateMeResponse, UsersUpdateMeError, ThrowOnError>({
            ...options,
            url: '/users/me'
        });
    }
    
    /**
     * Update User
     */
    public static updateUser<ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserData, ThrowOnError>) {
        return (options?.client ?? client).patch<UsersUpdateUserResponse, UsersUpdateUserError, ThrowOnError>({
            ...options,
            url: '/users/member-status/{user_id}'
        });
    }
    
}

export class PostsService {
    /**
     * Get All Posts
     */
    public static getAllPosts<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<PostsGetAllPostsResponse, PostsGetAllPostsError, ThrowOnError>({
            ...options,
            url: '/posts/'
        });
    }
    
    /**
     * Create Post
     */
    public static createPost<ThrowOnError extends boolean = false>(options: Options<PostsCreatePostData, ThrowOnError>) {
        return (options?.client ?? client).post<PostsCreatePostResponse, PostsCreatePostError, ThrowOnError>({
            ...options,
            url: '/posts/'
        });
    }
    
    /**
     * Delete Post
     */
    public static deletePost<ThrowOnError extends boolean = false>(options: Options<PostsDeletePostData, ThrowOnError>) {
        return (options?.client ?? client).delete<PostsDeletePostResponse, PostsDeletePostError, ThrowOnError>({
            ...options,
            url: '/posts/{post_id}'
        });
    }
    
}

export class PermissionsService {
    /**
     * Get All Permissions
     */
    public static getAllPermissions<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<PermissionsGetAllPermissionsResponse, PermissionsGetAllPermissionsError, ThrowOnError>({
            ...options,
            url: '/permissions/'
        });
    }
    
    /**
     * Create Permission
     */
    public static createPermission<ThrowOnError extends boolean = false>(options: Options<PermissionsCreatePermissionData, ThrowOnError>) {
        return (options?.client ?? client).post<PermissionsCreatePermissionResponse, PermissionsCreatePermissionError, ThrowOnError>({
            ...options,
            url: '/permissions/'
        });
    }
    
    /**
     * Change Post Permission
     */
    public static changePostPermission<ThrowOnError extends boolean = false>(options: Options<PermissionsChangePostPermissionData, ThrowOnError>) {
        return (options?.client ?? client).post<PermissionsChangePostPermissionResponse, PermissionsChangePostPermissionError, ThrowOnError>({
            ...options,
            url: '/permissions/update-permission'
        });
    }
    
}

export class AuthService {
    /**
     * Auth:Jwt.Login
     */
    public static authJwtLogin<ThrowOnError extends boolean = false>(options: Options<AuthAuthJwtLoginData, ThrowOnError>) {
        return (options?.client ?? client).post<AuthAuthJwtLoginResponse, AuthAuthJwtLoginError, ThrowOnError>({
            ...options,
            ...urlSearchParamsBodySerializer,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options?.headers
            },
            url: '/auth/login'
        });
    }
    
    /**
     * Auth:Jwt.Logout
     */
    public static authJwtLogout<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).post<AuthAuthJwtLogoutResponse, AuthAuthJwtLogoutError, ThrowOnError>({
            ...options,
            url: '/auth/logout'
        });
    }
    
    /**
     * Register:Register
     */
    public static registerRegister<ThrowOnError extends boolean = false>(options: Options<AuthRegisterRegisterData, ThrowOnError>) {
        return (options?.client ?? client).post<AuthRegisterRegisterResponse, AuthRegisterRegisterError, ThrowOnError>({
            ...options,
            url: '/auth/register'
        });
    }
    
    /**
     * Reset:Forgot Password
     */
    public static resetForgotPassword<ThrowOnError extends boolean = false>(options: Options<AuthResetForgotPasswordData, ThrowOnError>) {
        return (options?.client ?? client).post<AuthResetForgotPasswordResponse, AuthResetForgotPasswordError, ThrowOnError>({
            ...options,
            url: '/auth/forgot-password'
        });
    }
    
    /**
     * Reset:Reset Password
     */
    public static resetResetPassword<ThrowOnError extends boolean = false>(options: Options<AuthResetResetPasswordData, ThrowOnError>) {
        return (options?.client ?? client).post<AuthResetResetPasswordResponse, AuthResetResetPasswordError, ThrowOnError>({
            ...options,
            url: '/auth/reset-password'
        });
    }
    
    /**
     * Verify:Request-Token
     */
    public static verifyRequestToken<ThrowOnError extends boolean = false>(options: Options<AuthVerifyRequestTokenData, ThrowOnError>) {
        return (options?.client ?? client).post<AuthVerifyRequestTokenResponse, AuthVerifyRequestTokenError, ThrowOnError>({
            ...options,
            url: '/auth/request-verify-token'
        });
    }
    
    /**
     * Verify:Verify
     */
    public static verifyVerify<ThrowOnError extends boolean = false>(options: Options<AuthVerifyVerifyData, ThrowOnError>) {
        return (options?.client ?? client).post<AuthVerifyVerifyResponse, AuthVerifyVerifyError, ThrowOnError>({
            ...options,
            url: '/auth/verify'
        });
    }
    
}

export class EventsService {
    /**
     * Get All Events
     */
    public static getAllEvents<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<EventsGetAllEventsResponse, EventsGetAllEventsError, ThrowOnError>({
            ...options,
            url: '/events/'
        });
    }
    
    /**
     * Create Event
     */
    public static createEvent<ThrowOnError extends boolean = false>(options: Options<EventsCreateEventData, ThrowOnError>) {
        return (options?.client ?? client).post<EventsCreateEventResponse, EventsCreateEventError, ThrowOnError>({
            ...options,
            url: '/events/'
        });
    }
    
    /**
     * Remove
     */
    public static remove<ThrowOnError extends boolean = false>(options: Options<EventsRemoveData, ThrowOnError>) {
        return (options?.client ?? client).delete<EventsRemoveResponse, EventsRemoveError, ThrowOnError>({
            ...options,
            url: '/events/{event_id}'
        });
    }
    
    /**
     * Update
     */
    public static update<ThrowOnError extends boolean = false>(options: Options<EventsUpdateData, ThrowOnError>) {
        return (options?.client ?? client).patch<EventsUpdateResponse, EventsUpdateError, ThrowOnError>({
            ...options,
            url: '/events/{event_id}'
        });
    }
    
    /**
     * Get Random Signup
     */
    public static getRandomSignup<ThrowOnError extends boolean = false>(options: Options<EventsGetRandomSignupData, ThrowOnError>) {
        return (options?.client ?? client).get<EventsGetRandomSignupResponse, EventsGetRandomSignupError, ThrowOnError>({
            ...options,
            url: '/events/{event_id}'
        });
    }
    
    /**
     * Get All Signups
     */
    public static getAllSignups<ThrowOnError extends boolean = false>(options: Options<EventsGetAllSignupsData, ThrowOnError>) {
        return (options?.client ?? client).get<EventsGetAllSignupsResponse, EventsGetAllSignupsError, ThrowOnError>({
            ...options,
            url: '/events/all/{event_id}'
        });
    }
    
}

export class EventSignupService {
    /**
     * Signup Route
     */
    public static signupRoute<ThrowOnError extends boolean = false>(options: Options<EventSignupSignupRouteData, ThrowOnError>) {
        return (options?.client ?? client).post<EventSignupSignupRouteResponse, EventSignupSignupRouteError, ThrowOnError>({
            ...options,
            url: '/event-signup/{event_id}'
        });
    }
    
    /**
     * Signoff Route
     */
    public static signoffRoute<ThrowOnError extends boolean = false>(options: Options<EventSignupSignoffRouteData, ThrowOnError>) {
        return (options?.client ?? client).delete<EventSignupSignoffRouteResponse, EventSignupSignoffRouteError, ThrowOnError>({
            ...options,
            url: '/event-signup/{event_id}'
        });
    }
    
    /**
     * Update Signup
     */
    public static updateSignup<ThrowOnError extends boolean = false>(options: Options<EventSignupUpdateSignupData, ThrowOnError>) {
        return (options?.client ?? client).patch<EventSignupUpdateSignupResponse, EventSignupUpdateSignupError, ThrowOnError>({
            ...options,
            url: '/event-signup/{event_id}'
        });
    }
    
}

export class NewsService {
    /**
     * Get All News
     */
    public static getAllNews<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<NewsGetAllNewsResponse, NewsGetAllNewsError, ThrowOnError>({
            ...options,
            url: '/news/all'
        });
    }
    
    /**
     * Get News
     */
    public static getNews<ThrowOnError extends boolean = false>(options: Options<NewsGetNewsData, ThrowOnError>) {
        return (options?.client ?? client).get<NewsGetNewsResponse, NewsGetNewsError, ThrowOnError>({
            ...options,
            url: '/news/{news_id}'
        });
    }
    
    /**
     * Delete News
     */
    public static deleteNews<ThrowOnError extends boolean = false>(options: Options<NewsDeleteNewsData, ThrowOnError>) {
        return (options?.client ?? client).delete<NewsDeleteNewsResponse, NewsDeleteNewsError, ThrowOnError>({
            ...options,
            url: '/news/{news_id}'
        });
    }
    
    /**
     * Update News
     */
    public static updateNews<ThrowOnError extends boolean = false>(options: Options<NewsUpdateNewsData, ThrowOnError>) {
        return (options?.client ?? client).patch<NewsUpdateNewsResponse, NewsUpdateNewsError, ThrowOnError>({
            ...options,
            url: '/news/{news_id}'
        });
    }
    
    /**
     * Create News
     */
    public static createNews<ThrowOnError extends boolean = false>(options: Options<NewsCreateNewsData, ThrowOnError>) {
        return (options?.client ?? client).post<NewsCreateNewsResponse, NewsCreateNewsError, ThrowOnError>({
            ...options,
            url: '/news/'
        });
    }
    
    /**
     * Bump News
     */
    public static bumpNews<ThrowOnError extends boolean = false>(options: Options<NewsBumpNewsData, ThrowOnError>) {
        return (options?.client ?? client).patch<NewsBumpNewsResponse, NewsBumpNewsError, ThrowOnError>({
            ...options,
            url: '/news/bump/{news_id}'
        });
    }
    
    /**
     * Get Paginated News
     */
    public static getPaginatedNews<ThrowOnError extends boolean = false>(options: Options<NewsGetPaginatedNewsData, ThrowOnError>) {
        return (options?.client ?? client).get<NewsGetPaginatedNewsResponse, NewsGetPaginatedNewsError, ThrowOnError>({
            ...options,
            url: '/news/page/{page_nbr}'
        });
    }
    
}

export class CafeService {
    /**
     * View All Shifts
     */
    public static viewAllShifts<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<CafeViewAllShiftsResponse, CafeViewAllShiftsError, ThrowOnError>({
            ...options,
            url: '/cafe-shifts/view-shifts'
        });
    }
    
    /**
     * View Shift
     */
    public static viewShift<ThrowOnError extends boolean = false>(options: Options<CafeViewShiftData, ThrowOnError>) {
        return (options?.client ?? client).get<CafeViewShiftResponse, CafeViewShiftError, ThrowOnError>({
            ...options,
            url: '/cafe-shifts/{shift_id}'
        });
    }
    
    /**
     * Delete Shift
     */
    public static deleteShift<ThrowOnError extends boolean = false>(options: Options<CafeDeleteShiftData, ThrowOnError>) {
        return (options?.client ?? client).delete<CafeDeleteShiftResponse, CafeDeleteShiftError, ThrowOnError>({
            ...options,
            url: '/cafe-shifts/{shift_id}'
        });
    }
    
    /**
     * View Shifts Between Dates
     */
    public static viewShiftsBetweenDates<ThrowOnError extends boolean = false>(options: Options<CafeViewShiftsBetweenDatesData, ThrowOnError>) {
        return (options?.client ?? client).get<CafeViewShiftsBetweenDatesResponse, CafeViewShiftsBetweenDatesError, ThrowOnError>({
            ...options,
            url: '/cafe-shifts/view-between-dates'
        });
    }
    
    /**
     * Create Shift
     */
    public static createShift<ThrowOnError extends boolean = false>(options: Options<CafeCreateShiftData, ThrowOnError>) {
        return (options?.client ?? client).post<CafeCreateShiftResponse, CafeCreateShiftError, ThrowOnError>({
            ...options,
            url: '/cafe-shifts/'
        });
    }
    
    /**
     * Update Shift
     */
    public static updateShift<ThrowOnError extends boolean = false>(options: Options<CafeUpdateShiftData, ThrowOnError>) {
        return (options?.client ?? client).patch<CafeUpdateShiftResponse, CafeUpdateShiftError, ThrowOnError>({
            ...options,
            url: '/cafe-shifts/update/{shift_id}'
        });
    }
    
    /**
     * Signup To Shift
     */
    public static signupToShift<ThrowOnError extends boolean = false>(options: Options<CafeSignupToShiftData, ThrowOnError>) {
        return (options?.client ?? client).patch<CafeSignupToShiftResponse, CafeSignupToShiftError, ThrowOnError>({
            ...options,
            url: '/cafe-shifts/sign-up/{shift_id}'
        });
    }
    
    /**
     * Signoff From Shift
     */
    public static signoffFromShift<ThrowOnError extends boolean = false>(options: Options<CafeSignoffFromShiftData, ThrowOnError>) {
        return (options?.client ?? client).patch<CafeSignoffFromShiftResponse, CafeSignoffFromShiftError, ThrowOnError>({
            ...options,
            url: '/cafe-shifts/sign-off/{shift_id}'
        });
    }
    
}

export class SongsService {
    /**
     * Get All Songs
     */
    public static getAllSongs<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<SongsGetAllSongsResponse, SongsGetAllSongsError, ThrowOnError>({
            ...options,
            url: '/songs/'
        });
    }
    
    /**
     * Create Song
     */
    public static createSong<ThrowOnError extends boolean = false>(options: Options<SongsCreateSongData, ThrowOnError>) {
        return (options?.client ?? client).post<SongsCreateSongResponse, SongsCreateSongError, ThrowOnError>({
            ...options,
            url: '/songs/'
        });
    }
    
    /**
     * Get Song
     */
    public static getSong<ThrowOnError extends boolean = false>(options: Options<SongsGetSongData, ThrowOnError>) {
        return (options?.client ?? client).get<SongsGetSongResponse, SongsGetSongError, ThrowOnError>({
            ...options,
            url: '/songs/{song_id}'
        });
    }
    
    /**
     * Delete Song
     */
    public static deleteSong<ThrowOnError extends boolean = false>(options: Options<SongsDeleteSongData, ThrowOnError>) {
        return (options?.client ?? client).delete<SongsDeleteSongResponse, SongsDeleteSongError, ThrowOnError>({
            ...options,
            url: '/songs/{song_id}'
        });
    }
    
    /**
     * Update Song
     */
    public static updateSong<ThrowOnError extends boolean = false>(options: Options<SongsUpdateSongData, ThrowOnError>) {
        return (options?.client ?? client).patch<SongsUpdateSongResponse, SongsUpdateSongError, ThrowOnError>({
            ...options,
            url: '/songs/{song_id}'
        });
    }
    
}

export class SongsCategoryService {
    /**
     * Get All Song Categories
     */
    public static getAllSongCategories<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<SongsCategoryGetAllSongCategoriesResponse, SongsCategoryGetAllSongCategoriesError, ThrowOnError>({
            ...options,
            url: '/songs-category/'
        });
    }
    
    /**
     * Create Song Category
     */
    public static createSongCategory<ThrowOnError extends boolean = false>(options: Options<SongsCategoryCreateSongCategoryData, ThrowOnError>) {
        return (options?.client ?? client).post<SongsCategoryCreateSongCategoryResponse, SongsCategoryCreateSongCategoryError, ThrowOnError>({
            ...options,
            url: '/songs-category/'
        });
    }
    
    /**
     * Get Song Category
     */
    public static getSongCategory<ThrowOnError extends boolean = false>(options: Options<SongsCategoryGetSongCategoryData, ThrowOnError>) {
        return (options?.client ?? client).get<SongsCategoryGetSongCategoryResponse, SongsCategoryGetSongCategoryError, ThrowOnError>({
            ...options,
            url: '/songs-category/{category_id}'
        });
    }
    
    /**
     * Delete Song Category
     */
    public static deleteSongCategory<ThrowOnError extends boolean = false>(options: Options<SongsCategoryDeleteSongCategoryData, ThrowOnError>) {
        return (options?.client ?? client).delete<SongsCategoryDeleteSongCategoryResponse, SongsCategoryDeleteSongCategoryError, ThrowOnError>({
            ...options,
            url: '/songs-category/{category_id}'
        });
    }
    
    /**
     * Update Song Category
     */
    public static updateSongCategory<ThrowOnError extends boolean = false>(options: Options<SongsCategoryUpdateSongCategoryData, ThrowOnError>) {
        return (options?.client ?? client).patch<SongsCategoryUpdateSongCategoryResponse, SongsCategoryUpdateSongCategoryError, ThrowOnError>({
            ...options,
            url: '/songs-category/{category_id}'
        });
    }
    
}

export class ImgService {
    /**
     * Upload Image
     */
    public static uploadImage<ThrowOnError extends boolean = false>(options: Options<ImgUploadImageData, ThrowOnError>) {
        return (options?.client ?? client).post<ImgUploadImageResponse, ImgUploadImageError, ThrowOnError>({
            ...options,
            ...formDataBodySerializer,
            headers: {
                'Content-Type': null,
                ...options?.headers
            },
            url: '/img/'
        });
    }
    
    /**
     * Delete Image
     */
    public static deleteImage<ThrowOnError extends boolean = false>(options: Options<ImgDeleteImageData, ThrowOnError>) {
        return (options?.client ?? client).delete<ImgDeleteImageResponse, ImgDeleteImageError, ThrowOnError>({
            ...options,
            url: '/img/{id}'
        });
    }
    
    /**
     * Get Image
     */
    public static getImage<ThrowOnError extends boolean = false>(options: Options<ImgGetImageData, ThrowOnError>) {
        return (options?.client ?? client).get<ImgGetImageResponse, ImgGetImageError, ThrowOnError>({
            ...options,
            url: '/img/{id}'
        });
    }
    
}

export class AlbumsService {
    /**
     * Create Album
     */
    public static createAlbum<ThrowOnError extends boolean = false>(options: Options<AlbumsCreateAlbumData, ThrowOnError>) {
        return (options?.client ?? client).post<AlbumsCreateAlbumResponse, AlbumsCreateAlbumError, ThrowOnError>({
            ...options,
            url: '/albums/'
        });
    }
    
    /**
     * Get One Album
     */
    public static getOneAlbum<ThrowOnError extends boolean = false>(options: Options<AlbumsGetOneAlbumData, ThrowOnError>) {
        return (options?.client ?? client).get<AlbumsGetOneAlbumResponse, AlbumsGetOneAlbumError, ThrowOnError>({
            ...options,
            url: '/albums/'
        });
    }
    
    /**
     * Get Albums
     */
    public static getAlbums<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<AlbumsGetAlbumsResponse, AlbumsGetAlbumsError, ThrowOnError>({
            ...options,
            url: '/albums/all'
        });
    }
    
    /**
     * Delete One Album
     */
    public static deleteOneAlbum<ThrowOnError extends boolean = false>(options: Options<AlbumsDeleteOneAlbumData, ThrowOnError>) {
        return (options?.client ?? client).delete<AlbumsDeleteOneAlbumResponse, AlbumsDeleteOneAlbumError, ThrowOnError>({
            ...options,
            url: '/albums/{album_id}'
        });
    }
    
}

export class AdsService {
    /**
     * Get All Ads
     */
    public static getAllAds<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<AdsGetAllAdsResponse, AdsGetAllAdsError, ThrowOnError>({
            ...options,
            url: '/ad/'
        });
    }
    
    /**
     * Create Ad
     */
    public static createAd<ThrowOnError extends boolean = false>(options: Options<AdsCreateAdData, ThrowOnError>) {
        return (options?.client ?? client).post<AdsCreateAdResponse, AdsCreateAdError, ThrowOnError>({
            ...options,
            url: '/ad/'
        });
    }
    
    /**
     * Get Ad By Id
     */
    public static getAdById<ThrowOnError extends boolean = false>(options: Options<AdsGetAdByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<AdsGetAdByIdResponse, AdsGetAdByIdError, ThrowOnError>({
            ...options,
            url: '/ad/{id}'
        });
    }
    
    /**
     * Remove Ad
     */
    public static removeAd<ThrowOnError extends boolean = false>(options: Options<AdsRemoveAdData, ThrowOnError>) {
        return (options?.client ?? client).delete<AdsRemoveAdResponse, AdsRemoveAdError, ThrowOnError>({
            ...options,
            url: '/ad/{id}'
        });
    }
    
    /**
     * Get Ad By User
     */
    public static getAdByUser<ThrowOnError extends boolean = false>(options: Options<AdsGetAdByUserData, ThrowOnError>) {
        return (options?.client ?? client).get<AdsGetAdByUserResponse, AdsGetAdByUserError, ThrowOnError>({
            ...options,
            url: '/ad/username/{username}'
        });
    }
    
    /**
     * Get Book Ad By Author
     */
    public static getBookAdByAuthor<ThrowOnError extends boolean = false>(options: Options<AdsGetBookAdByAuthorData, ThrowOnError>) {
        return (options?.client ?? client).get<AdsGetBookAdByAuthorResponse, AdsGetBookAdByAuthorError, ThrowOnError>({
            ...options,
            url: '/ad/authorname/{authorname}'
        });
    }
    
    /**
     * Get Book Ad By Title
     */
    public static getBookAdByTitle<ThrowOnError extends boolean = false>(options: Options<AdsGetBookAdByTitleData, ThrowOnError>) {
        return (options?.client ?? client).get<AdsGetBookAdByTitleResponse, AdsGetBookAdByTitleError, ThrowOnError>({
            ...options,
            url: '/ad/title/{stitle}'
        });
    }
    
    /**
     * Remove Ad Super User
     */
    public static removeAdSuperUser<ThrowOnError extends boolean = false>(options: Options<AdsRemoveAdSuperUserData, ThrowOnError>) {
        return (options?.client ?? client).delete<AdsRemoveAdSuperUserResponse, AdsRemoveAdSuperUserError, ThrowOnError>({
            ...options,
            url: '/ad/manage-route/{id}'
        });
    }
    
    /**
     * Update Ad
     */
    public static updateAd<ThrowOnError extends boolean = false>(options: Options<AdsUpdateAdData, ThrowOnError>) {
        return (options?.client ?? client).put<AdsUpdateAdResponse, AdsUpdateAdError, ThrowOnError>({
            ...options,
            url: '/ad/updateAd/{id}'
        });
    }
    
}

export class CarsService {
    /**
     * Get All Booking
     */
    public static getAllBooking<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<CarsGetAllBookingResponse, CarsGetAllBookingError, ThrowOnError>({
            ...options,
            url: '/car/'
        });
    }
    
    /**
     * Create Booking
     */
    public static createBooking<ThrowOnError extends boolean = false>(options: Options<CarsCreateBookingData, ThrowOnError>) {
        return (options?.client ?? client).post<CarsCreateBookingResponse, CarsCreateBookingError, ThrowOnError>({
            ...options,
            url: '/car/'
        });
    }
    
    /**
     * Get Booking
     */
    public static getBooking<ThrowOnError extends boolean = false>(options: Options<CarsGetBookingData, ThrowOnError>) {
        return (options?.client ?? client).get<CarsGetBookingResponse, CarsGetBookingError, ThrowOnError>({
            ...options,
            url: '/car/{booking_id}'
        });
    }
    
    /**
     * Remove Booking
     */
    public static removeBooking<ThrowOnError extends boolean = false>(options: Options<CarsRemoveBookingData, ThrowOnError>) {
        return (options?.client ?? client).delete<CarsRemoveBookingResponse, CarsRemoveBookingError, ThrowOnError>({
            ...options,
            url: '/car/{booking_id}'
        });
    }
    
    /**
     * Update Booking
     */
    public static updateBooking<ThrowOnError extends boolean = false>(options: Options<CarsUpdateBookingData, ThrowOnError>) {
        return (options?.client ?? client).patch<CarsUpdateBookingResponse, CarsUpdateBookingError, ThrowOnError>({
            ...options,
            url: '/car/{booking_id}'
        });
    }
    
}

export class ElectionsService {
    /**
     * Get All Elections
     */
    public static getAllElections<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<ElectionsGetAllElectionsResponse, ElectionsGetAllElectionsError, ThrowOnError>({
            ...options,
            url: '/election/'
        });
    }
    
    /**
     * Create Election
     */
    public static createElection<ThrowOnError extends boolean = false>(options: Options<ElectionsCreateElectionData, ThrowOnError>) {
        return (options?.client ?? client).post<ElectionsCreateElectionResponse, ElectionsCreateElectionError, ThrowOnError>({
            ...options,
            url: '/election/'
        });
    }
    
    /**
     * Get Election
     */
    public static getElection<ThrowOnError extends boolean = false>(options: Options<ElectionsGetElectionData, ThrowOnError>) {
        return (options?.client ?? client).get<ElectionsGetElectionResponse, ElectionsGetElectionError, ThrowOnError>({
            ...options,
            url: '/election/{election_id}'
        });
    }
    
    /**
     * Delete Election
     */
    public static deleteElection<ThrowOnError extends boolean = false>(options: Options<ElectionsDeleteElectionData, ThrowOnError>) {
        return (options?.client ?? client).delete<ElectionsDeleteElectionResponse, ElectionsDeleteElectionError, ThrowOnError>({
            ...options,
            url: '/election/{election_id}'
        });
    }
    
    /**
     * Add Post To Election
     */
    public static addPostToElection<ThrowOnError extends boolean = false>(options: Options<ElectionsAddPostToElectionData, ThrowOnError>) {
        return (options?.client ?? client).post<ElectionsAddPostToElectionResponse, ElectionsAddPostToElectionError, ThrowOnError>({
            ...options,
            url: '/election/{election_id}'
        });
    }
    
}

export class CandidatesService {
    /**
     * Get All Candidations
     */
    public static getAllCandidations<ThrowOnError extends boolean = false>(options: Options<CandidatesGetAllCandidationsData, ThrowOnError>) {
        return (options?.client ?? client).get<CandidatesGetAllCandidationsResponse, CandidatesGetAllCandidationsError, ThrowOnError>({
            ...options,
            url: '/candidate/{election_id}'
        });
    }
    
    /**
     * Create Candidation
     */
    public static createCandidation<ThrowOnError extends boolean = false>(options: Options<CandidatesCreateCandidationData, ThrowOnError>) {
        return (options?.client ?? client).post<CandidatesCreateCandidationResponse, CandidatesCreateCandidationError, ThrowOnError>({
            ...options,
            url: '/candidate/{election_id}'
        });
    }
    
    /**
     * Create Candidations
     */
    public static createCandidations<ThrowOnError extends boolean = false>(options: Options<CandidatesCreateCandidationsData, ThrowOnError>) {
        return (options?.client ?? client).post<CandidatesCreateCandidationsResponse, CandidatesCreateCandidationsError, ThrowOnError>({
            ...options,
            url: '/candidate/many/{election_id}'
        });
    }
    
}

export class AdventureMissionService {
    /**
     * Post Adventure Mission
     */
    public static postAdventureMission<ThrowOnError extends boolean = false>(options: Options<AdventureMissionPostAdventureMissionData, ThrowOnError>) {
        return (options?.client ?? client).post<AdventureMissionPostAdventureMissionResponse, AdventureMissionPostAdventureMissionError, ThrowOnError>({
            ...options,
            url: '/adventure-mission/'
        });
    }
    
    /**
     * Get All Adventure Missions
     */
    public static getAllAdventureMissions<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<AdventureMissionGetAllAdventureMissionsResponse, AdventureMissionGetAllAdventureMissionsError, ThrowOnError>({
            ...options,
            url: '/adventure-mission/all'
        });
    }
    
    /**
     * Get Adventure Mission
     */
    public static getAdventureMission<ThrowOnError extends boolean = false>(options: Options<AdventureMissionGetAdventureMissionData, ThrowOnError>) {
        return (options?.client ?? client).get<AdventureMissionGetAdventureMissionResponse, AdventureMissionGetAdventureMissionError, ThrowOnError>({
            ...options,
            url: '/adventure-mission/{id}'
        });
    }
    
    /**
     * Delete Adventure Mission
     */
    public static deleteAdventureMission<ThrowOnError extends boolean = false>(options: Options<AdventureMissionDeleteAdventureMissionData, ThrowOnError>) {
        return (options?.client ?? client).delete<AdventureMissionDeleteAdventureMissionResponse, AdventureMissionDeleteAdventureMissionError, ThrowOnError>({
            ...options,
            url: '/adventure-mission/delete/{id}'
        });
    }
    
    /**
     * Patch Adventure Mission
     */
    public static patchAdventureMission<ThrowOnError extends boolean = false>(options: Options<AdventureMissionPatchAdventureMissionData, ThrowOnError>) {
        return (options?.client ?? client).patch<AdventureMissionPatchAdventureMissionResponse, AdventureMissionPatchAdventureMissionError, ThrowOnError>({
            ...options,
            url: '/adventure-mission/patch/{id}'
        });
    }
    
}

export class GroupsService {
    /**
     * Upload Group
     */
    public static uploadGroup<ThrowOnError extends boolean = false>(options: Options<GroupsUploadGroupData, ThrowOnError>) {
        return (options?.client ?? client).post<GroupsUploadGroupResponse, GroupsUploadGroupError, ThrowOnError>({
            ...options,
            url: '/groups/'
        });
    }
    
    /**
     * Get Groups
     */
    public static getGroups<ThrowOnError extends boolean = false>(options?: Options<GroupsGetGroupsData, ThrowOnError>) {
        return (options?.client ?? client).get<GroupsGetGroupsResponse, GroupsGetGroupsError, ThrowOnError>({
            ...options,
            url: '/groups/'
        });
    }
    
    /**
     * Get Single Group
     */
    public static getSingleGroup<ThrowOnError extends boolean = false>(options: Options<GroupsGetSingleGroupData, ThrowOnError>) {
        return (options?.client ?? client).get<GroupsGetSingleGroupResponse, GroupsGetSingleGroupError, ThrowOnError>({
            ...options,
            url: '/groups/{id}'
        });
    }
    
    /**
     * Patch Group
     */
    public static patchGroup<ThrowOnError extends boolean = false>(options: Options<GroupsPatchGroupData, ThrowOnError>) {
        return (options?.client ?? client).patch<GroupsPatchGroupResponse, GroupsPatchGroupError, ThrowOnError>({
            ...options,
            url: '/groups/{id}'
        });
    }
    
    /**
     * Remove Group
     */
    public static removeGroup<ThrowOnError extends boolean = false>(options: Options<GroupsRemoveGroupData, ThrowOnError>) {
        return (options?.client ?? client).delete<GroupsRemoveGroupResponse, GroupsRemoveGroupError, ThrowOnError>({
            ...options,
            url: '/groups/delete/{id}'
        });
    }
    
    /**
     * Add User To Group
     */
    public static addUserToGroup<ThrowOnError extends boolean = false>(options: Options<GroupsAddUserToGroupData, ThrowOnError>) {
        return (options?.client ?? client).post<GroupsAddUserToGroupResponse, GroupsAddUserToGroupError, ThrowOnError>({
            ...options,
            url: '/groups/add_user/{id}'
        });
    }
    
    /**
     * Remove User From Group
     */
    public static removeUserFromGroup<ThrowOnError extends boolean = false>(options: Options<GroupsRemoveUserFromGroupData, ThrowOnError>) {
        return (options?.client ?? client).delete<GroupsRemoveUserFromGroupResponse, GroupsRemoveUserFromGroupError, ThrowOnError>({
            ...options,
            url: '/groups/remove_user_from_group/{id}'
        });
    }
    
}

export class NollningService {
    /**
     * Post Nollning
     */
    public static postNollning<ThrowOnError extends boolean = false>(options: Options<NollningPostNollningData, ThrowOnError>) {
        return (options?.client ?? client).post<NollningPostNollningResponse, NollningPostNollningError, ThrowOnError>({
            ...options,
            url: '/nollning/'
        });
    }
    
    /**
     * Get All Nollning
     */
    public static getAllNollning<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<NollningGetAllNollningResponse, NollningGetAllNollningError, ThrowOnError>({
            ...options,
            url: '/nollning/all'
        });
    }
    
    /**
     * Patch Nollning
     */
    public static patchNollning<ThrowOnError extends boolean = false>(options: Options<NollningPatchNollningData, ThrowOnError>) {
        return (options?.client ?? client).patch<NollningPatchNollningResponse, NollningPatchNollningError, ThrowOnError>({
            ...options,
            url: '/nollning/patch/{id}'
        });
    }
    
    /**
     * Delete Nollning
     */
    public static deleteNollning<ThrowOnError extends boolean = false>(options: Options<NollningDeleteNollningData, ThrowOnError>) {
        return (options?.client ?? client).delete<NollningDeleteNollningResponse, NollningDeleteNollningError, ThrowOnError>({
            ...options,
            url: '/nollning/delete/{id}'
        });
    }
    
    /**
     * Add Group To Nollning
     */
    public static addGroupToNollning<ThrowOnError extends boolean = false>(options: Options<NollningAddGroupToNollningData, ThrowOnError>) {
        return (options?.client ?? client).post<NollningAddGroupToNollningResponse, NollningAddGroupToNollningError, ThrowOnError>({
            ...options,
            url: '/nollning/add_group/{id}'
        });
    }
    
    /**
     * Add Completed Mission
     */
    public static addCompletedMission<ThrowOnError extends boolean = false>(options: Options<NollningAddCompletedMissionData, ThrowOnError>) {
        return (options?.client ?? client).post<NollningAddCompletedMissionResponse, NollningAddCompletedMissionError, ThrowOnError>({
            ...options,
            url: '/group_mission/{id}'
        });
    }
    
    /**
     * Get Completed Missions
     */
    public static getCompletedMissions<ThrowOnError extends boolean = false>(options: Options<NollningGetCompletedMissionsData, ThrowOnError>) {
        return (options?.client ?? client).get<NollningGetCompletedMissionsResponse, NollningGetCompletedMissionsError, ThrowOnError>({
            ...options,
            url: '/group_mission/{nollning_id}'
        });
    }
    
}

export class TagsService {
    /**
     * Get Tags
     */
    public static getTags<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<TagsGetTagsResponse, TagsGetTagsError, ThrowOnError>({
            ...options,
            url: '/tags/'
        });
    }
    
    /**
     * Post Tag
     */
    public static postTag<ThrowOnError extends boolean = false>(options: Options<TagsPostTagData, ThrowOnError>) {
        return (options?.client ?? client).post<TagsPostTagResponse, TagsPostTagError, ThrowOnError>({
            ...options,
            url: '/tags/'
        });
    }
    
}

export class DefaultService {
    /**
     * Hello Route
     */
    public static helloRoute<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<HelloRouteResponse, HelloRouteError, ThrowOnError>({
            ...options,
            url: '/'
        });
    }
    
    /**
     * User Only
     */
    public static nlyuserOnly<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<UserOnlyuserOnlyResponse, UserOnlyuserOnlyError, ThrowOnError>({
            ...options,
            url: '/user-only'
        });
    }
    
    /**
     * Member Only
     */
    public static nlymemberOnly<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<MemberOnlymemberOnlyResponse, MemberOnlymemberOnlyError, ThrowOnError>({
            ...options,
            url: '/member-only'
        });
    }
    
    /**
     * Permission Route
     */
    public static ventOnlypermissionRoute<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<ManageEventOnlypermissionRouteResponse, ManageEventOnlypermissionRouteError, ThrowOnError>({
            ...options,
            url: '/manage-event-only'
        });
    }
    
}