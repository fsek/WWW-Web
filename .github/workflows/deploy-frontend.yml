name: Deploy Frontend

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Which environment to deploy (stage or prod)'
        required: true
        default: 'stage'
        type: choice
        options:
          - stage
          - prod
  push:
    branches:
      - stage
      - prod

env:
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: ghcr.io

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Determine “target” and checkout ref
        id: pick
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "target=${{ github.event.inputs.target }}" >> $GITHUB_OUTPUT
            echo "ref=main"                 >> $GITHUB_OUTPUT
          else
            # on push, the branch name is either "stage" or "prod"
            BRANCH=${GITHUB_REF#refs/heads/}
            echo "target=$BRANCH"           >> $GITHUB_OUTPUT
            echo "ref=$BRANCH"              >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pick.outputs.ref }}
          fetch-depth: 0

      - name: Set OPENAPI_JSON_URL
        run: |
          if [ "${{ steps.pick.outputs.target }}" = "stage" ]; then
            echo "OPENAPI_JSON_URL=${{ secrets.OPENAPI_JSON_URL_STAGE }}" >> $GITHUB_ENV
            echo "API_BASE_URL=https://stage.backend.fsektionen.se"     >> $GITHUB_ENV
          else
            echo "OPENAPI_JSON_URL=${{ secrets.OPENAPI_JSON_URL_PROD }}"  >> $GITHUB_ENV
            echo "API_BASE_URL=https://backend.fsektionen.se"            >> $GITHUB_ENV
          fi

      - name: Download OpenAPI spec
        run: |
          mkdir -p src/api
          curl -fSL "$OPENAPI_JSON_URL" -o src/api/openapi.json

      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies (host)
        run: bun install --frozen-lockfile

      - name: Generate API client
        run: bun run deploy-generate-api

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch

      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            API_BASE_URL=${{ env.API_BASE_URL }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build-image.outputs.digest }}
          push-to-registry: true
